"""
üî§ Exemplo de Uso do PARSeq TINE
Demonstra como usar a engine PARSeq (Tiny Efficient) para OCR.
"""

import sys
from pathlib import Path

import cv2
import numpy as np
from loguru import logger

# Adicionar src ao path
sys.path.append(str(Path(__file__).parent.parent.parent))

from src.ocr.config import load_ocr_config, load_preprocessing_config
from src.ocr.engines.parseq import PARSeqEngine
from src.ocr.preprocessors import ImagePreprocessor


def exemplo_basico():
    """Exemplo b√°sico de uso do PARSeq TINE."""
    logger.info("=" * 60)
    logger.info("üî§ EXEMPLO 1: Uso B√°sico do PARSeq TINE")
    logger.info("=" * 60)
    
    # Carregar configura√ß√£o
    config = load_ocr_config('config/ocr/parseq.yaml')
    
    # Criar engine
    engine = PARSeqEngine(config)
    engine.initialize()
    
    # Criar uma imagem de teste simples
    img = np.ones((50, 200, 3), dtype=np.uint8) * 255
    cv2.putText(img, "2025/12/31", (10, 35), 
                cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 0), 2)
    
    # Extrair texto
    text, confidence = engine.extract_text(img)
    
    logger.info(f"‚úÖ Texto extra√≠do: '{text}'")
    logger.info(f"‚úÖ Confian√ßa: {confidence:.3f}")


def exemplo_com_preprocessamento():
    """Exemplo com pr√©-processamento otimizado."""
    logger.info("\n" + "=" * 60)
    logger.info("üî§ EXEMPLO 2: PARSeq TINE com Pr√©-processamento")
    logger.info("=" * 60)
    
    # Carregar configura√ß√µes
    ocr_config = load_ocr_config('config/ocr/parseq.yaml')
    prep_config = load_preprocessing_config('config/preprocessing/ppro-parseq.yaml')
    
    # Criar engine e preprocessador
    engine = PARSeqEngine(ocr_config)
    preprocessor = ImagePreprocessor(prep_config)
    
    engine.initialize()
    
    # Criar imagem com ru√≠do
    img = np.ones((50, 200, 3), dtype=np.uint8) * 200
    # Adicionar ru√≠do
    noise = np.random.randint(-30, 30, img.shape, dtype=np.int16)
    img = np.clip(img.astype(np.int16) + noise, 0, 255).astype(np.uint8)
    # Adicionar texto
    cv2.putText(img, "2025/12/31", (10, 35), 
                cv2.FONT_HERSHEY_SIMPLEX, 1, (50, 50, 50), 2)
    
    # Sem pr√©-processamento
    text1, conf1 = engine.extract_text(img)
    logger.info(f"Sem pr√©-processamento: '{text1}' (conf: {conf1:.3f})")
    
    # Com pr√©-processamento
    img_preprocessed = preprocessor.preprocess(img)
    text2, conf2 = engine.extract_text(img_preprocessed)
    logger.info(f"Com pr√©-processamento: '{text2}' (conf: {conf2:.3f})")
    
    # Comparar
    if conf2 > conf1:
        logger.info("‚úÖ Pr√©-processamento melhorou a confian√ßa!")
    else:
        logger.info("‚ö†Ô∏è Pr√©-processamento n√£o melhorou significativamente")


def exemplo_multiplas_imagens():
    """Exemplo processando m√∫ltiplas imagens."""
    logger.info("\n" + "=" * 60)
    logger.info("üî§ EXEMPLO 3: PARSeq TINE - M√∫ltiplas Imagens")
    logger.info("=" * 60)
    
    # Configura√ß√£o
    config = load_ocr_config('config/ocr/parseq.yaml')
    engine = PARSeqEngine(config)
    engine.initialize()
    
    # Criar v√°rias imagens de teste
    datas = ["2025/12/31", "2024/01/15", "2026/06/30"]
    
    resultados = []
    for data in datas:
        # Criar imagem
        img = np.ones((50, 250, 3), dtype=np.uint8) * 255
        cv2.putText(img, data, (10, 35), 
                   cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 0), 2)
        
        # Extrair texto
        text, conf = engine.extract_text(img)
        resultados.append({
            'esperado': data,
            'extraido': text,
            'confianca': conf,
            'correto': text.strip() == data
        })
    
    # Mostrar resultados
    logger.info("Resultados:")
    for i, res in enumerate(resultados, 1):
        status = "‚úÖ" if res['correto'] else "‚ùå"
        logger.info(f"  {i}. {status} Esperado: {res['esperado']}, "
                   f"Extra√≠do: {res['extraido']}, Conf: {res['confianca']:.3f}")
    
    # Estat√≠sticas
    acuracia = sum(1 for r in resultados if r['correto']) / len(resultados)
    conf_media = np.mean([r['confianca'] for r in resultados])
    
    logger.info(f"\nüìä Estat√≠sticas:")
    logger.info(f"  Acur√°cia: {acuracia*100:.1f}%")
    logger.info(f"  Confian√ßa m√©dia: {conf_media:.3f}")


def exemplo_comparacao_modelos():
    """Exemplo comparando diferentes modelos PARSeq."""
    logger.info("\n" + "=" * 60)
    logger.info("üî§ EXEMPLO 4: Compara√ß√£o de Modelos PARSeq")
    logger.info("=" * 60)
    
    # Modelos para testar
    modelos = ['parseq-tiny', 'parseq']
    
    # Criar imagem de teste
    img = np.ones((50, 200, 3), dtype=np.uint8) * 255
    cv2.putText(img, "2025/12/31", (10, 35), 
                cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 0), 2)
    
    resultados = []
    
    for modelo in modelos:
        logger.info(f"\nTestando {modelo}...")
        
        try:
            # Configura√ß√£o
            config = {
                'model_name': modelo,
                'device': 'cuda',
                'img_height': 32,
                'img_width': 128,
                'max_length': 25
            }
            
            # Criar engine
            engine = PARSeqEngine(config)
            
            import time
            start = time.time()
            engine.initialize()
            init_time = time.time() - start
            
            # Extrair texto
            start = time.time()
            text, conf = engine.extract_text(img)
            inf_time = time.time() - start
            
            resultados.append({
                'modelo': modelo,
                'texto': text,
                'confianca': conf,
                'tempo_init': init_time,
                'tempo_inf': inf_time
            })
            
            logger.info(f"  ‚úÖ Texto: '{text}', Conf: {conf:.3f}")
            logger.info(f"  ‚è±Ô∏è Init: {init_time:.2f}s, Inf: {inf_time*1000:.1f}ms")
            
        except Exception as e:
            logger.error(f"  ‚ùå Erro com {modelo}: {e}")
    
    # Compara√ß√£o
    if len(resultados) >= 2:
        logger.info(f"\nüìä Compara√ß√£o:")
        logger.info(f"  TINE √© {resultados[1]['tempo_inf']/resultados[0]['tempo_inf']:.1f}x "
                   f"mais r√°pido que base")


def main():
    """Executa todos os exemplos."""
    logger.info("üöÄ Exemplos de Uso do PARSeq TINE\n")
    
    try:
        # Exemplo 1: B√°sico
        exemplo_basico()
        
        # Exemplo 2: Com pr√©-processamento
        exemplo_com_preprocessamento()
        
        # Exemplo 3: M√∫ltiplas imagens
        exemplo_multiplas_imagens()
        
        # Exemplo 4: Compara√ß√£o de modelos
        # Comentado por padr√£o pois baixa m√∫ltiplos modelos
        # exemplo_comparacao_modelos()
        
        logger.info("\n" + "=" * 60)
        logger.info("‚úÖ Todos os exemplos executados com sucesso!")
        logger.info("=" * 60)
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao executar exemplos: {e}")
        raise


if __name__ == "__main__":
    main()
