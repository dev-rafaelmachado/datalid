"""
üì• Script de Download Autom√°tico do Roboflow
Baixa dataset do Roboflow usando a API.
"""

import argparse
import os
from pathlib import Path
from loguru import logger

# Adicionar src ao path
import sys
ROOT = Path(__file__).resolve().parent.parent
sys.path.append(str(ROOT))

# Configura√ß√µes do projeto (baseadas no c√≥digo fornecido)
DEFAULT_API_KEY = "crS7dKMHZj3VlfWw40mS"
DEFAULT_WORKSPACE = "projetotransformadorii"
DEFAULT_PROJECT = "tcc_dateset_v2-zkcsu"
DEFAULT_VERSION = 2
DEFAULT_FORMAT = "yolov8"


def check_roboflow_installation():
    """Verifica se roboflow est√° instalado."""
    try:
        import roboflow
        logger.info("‚úÖ Roboflow j√° instalado")
        return True
    except ImportError:
        logger.warning("‚ö†Ô∏è Roboflow n√£o encontrado, instalando...")
        return False


def install_roboflow():
    """Instala biblioteca roboflow."""
    import subprocess
    try:
        subprocess.check_call(
            [sys.executable, "-m", "pip", "install", "roboflow"])
        logger.success("‚úÖ Roboflow instalado com sucesso")
        return True
    except subprocess.CalledProcessError as e:
        logger.error(f"‚ùå Erro instalando roboflow: {e}")
        return False


def ensure_absolute_path(path_str: str) -> Path:
    """Garante que o caminho seja absoluto e resolva a partir do diret√≥rio do projeto."""
    path = Path(path_str)
    if not path.is_absolute():
        # Se n√£o for absoluto, resolve a partir do diret√≥rio raiz do projeto
        path = ROOT / path
    return path.resolve()


def download_dataset(
    api_key: str,
    workspace: str,
    project: str,
    version: int,
    format: str = "yolov8",
    output_dir: str = "data/raw"
) -> bool:
    """
    Baixa dataset do Roboflow.

    Args:
        api_key: Chave da API do Roboflow
        workspace: Nome do workspace
        project: Nome do projeto
        version: Vers√£o do dataset
        format: Formato de sa√≠da (yolov8, coco, etc.)
        output_dir: Diret√≥rio de sa√≠da

    Returns:
        True se sucesso, False caso contr√°rio
    """
    try:
        # Importar roboflow
        from roboflow import Roboflow

        logger.info("üîó Conectando ao Roboflow...")
        rf = Roboflow(api_key=api_key)

        logger.info(f"üìÇ Acessando projeto: {workspace}/{project}")
        project_obj = rf.workspace(workspace).project(project)

        logger.info(f"üî¢ Selecionando vers√£o: {version}")
        version_obj = project_obj.version(version)

        # Criar diret√≥rio de sa√≠da com caminho absoluto
        output_path = ensure_absolute_path(output_dir)
        output_path.mkdir(parents=True, exist_ok=True)

        # Mudar para diret√≥rio de sa√≠da temporariamente
        original_dir = os.getcwd()
        logger.info(f"üìÅ Mudando para diret√≥rio: {output_path}")
        os.chdir(output_path)

        try:
            logger.info(f"üì• Baixando dataset no formato {format}...")
            dataset = version_obj.download(format)

            logger.success("‚úÖ Dataset baixado com sucesso!")

            # Mostrar informa√ß√µes do dataset
            dataset_info = {
                'workspace': workspace,
                'project': project,
                'version': version,
                'format': format,
                'location': str(output_path.absolute())
            }

            logger.info("üìä INFORMA√á√ïES DO DATASET:")
            for key, value in dataset_info.items():
                logger.info(f"  ‚Ä¢ {key}: {value}")

            # Verificar estrutura baixada
            downloaded_items = list(output_path.iterdir())
            logger.info(f"üìÅ Arquivos/pastas baixados: {len(downloaded_items)}")
            # Mostrar apenas os primeiros 10
            for item in downloaded_items[:10]:
                item_type = "üìÅ" if item.is_dir() else "üìÑ"
                logger.info(f"  {item_type} {item.name}")

            if len(downloaded_items) > 10:
                logger.info(f"  ... e mais {len(downloaded_items) - 10} itens")

            return True

        finally:
            # Voltar ao diret√≥rio original
            os.chdir(original_dir)

    except Exception as e:
        logger.error(f"‚ùå Erro baixando dataset: {str(e)}")
        return False


def parse_arguments():
    """Parse argumentos da linha de comando."""
    parser = argparse.ArgumentParser(
        description="Download autom√°tico de dataset do Roboflow",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )

    parser.add_argument(
        '--api-key',
        type=str,
        default=DEFAULT_API_KEY,
        help='Chave da API do Roboflow'
    )

    parser.add_argument(
        '--workspace',
        type=str,
        default=DEFAULT_WORKSPACE,
        help='Nome do workspace no Roboflow'
    )

    parser.add_argument(
        '--project',
        type=str,
        default=DEFAULT_PROJECT,
        help='Nome do projeto no Roboflow'
    )

    parser.add_argument(
        '--version',
        type=int,
        default=DEFAULT_VERSION,
        help='Vers√£o do dataset'
    )

    parser.add_argument(
        '--format',
        type=str,
        choices=['yolov8', 'yolov5', 'coco', 'pascal-voc', 'tensorflow'],
        default=DEFAULT_FORMAT,
        help='Formato de download'
    )

    parser.add_argument(
        '--output',
        type=str,
        default='data/raw',
        help='Diret√≥rio de sa√≠da'
    )

    parser.add_argument(
        '--force-install',
        action='store_true',
        help='For√ßar instala√ß√£o do roboflow'
    )

    parser.add_argument(
        '--process-after',
        action='store_true',
        help='Processar dados automaticamente ap√≥s download'
    )

    return parser.parse_args()


def main():
    """Fun√ß√£o principal."""
    args = parse_arguments()

    logger.info("üì• DOWNLOAD AUTOM√ÅTICO DO ROBOFLOW")
    logger.info("=" * 50)

    try:
        # 1. Verificar/instalar roboflow
        if args.force_install or not check_roboflow_installation():
            if not install_roboflow():
                logger.error("‚ùå Falha na instala√ß√£o do roboflow")
                return 1

        # 2. Download do dataset
        success = download_dataset(
            api_key=args.api_key,
            workspace=args.workspace,
            project=args.project,
            version=args.version,
            format=args.format,
            output_dir=args.output
        )

        if not success:
            logger.error("‚ùå Falha no download do dataset")
            return 1

        # 3. Processar dados se solicitado
        if args.process_after:
            logger.info("üîÑ Processando dados baixados...")

            # Importar script de processamento
            try:
                import subprocess

                # Encontrar pasta do dataset baixado
                output_path = ensure_absolute_path(args.output)
                dataset_folders = [
                    d for d in output_path.iterdir() if d.is_dir()]

                if dataset_folders:
                    # Usar primeira pasta encontrada
                    dataset_path = dataset_folders[0]

                    # Usar caminhos absolutos
                    script_path = ROOT / "scripts" / "process_raw_data.py"
                    output_processed = ROOT / "data" / "processed"

                    process_cmd = [
                        sys.executable,
                        str(script_path),
                        "--input", str(dataset_path),
                        "--output", str(output_processed),
                        "--task", "both",
                        "--validate"
                    ]

                    result = subprocess.run(
                        process_cmd, capture_output=True, text=True)

                    if result.returncode == 0:
                        logger.success("‚úÖ Dados processados automaticamente")
                    else:
                        logger.warning("‚ö†Ô∏è Erro no processamento autom√°tico")
                        logger.info(
                            "üí° Execute manualmente: make process-data INPUT=" + str(dataset_path))
                else:
                    logger.warning(
                        "‚ö†Ô∏è Pasta do dataset n√£o encontrada para processamento")

            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Erro no processamento autom√°tico: {e}")
                logger.info(
                    "üí° Execute manualmente: make process-data INPUT=" + args.output)

        # Resumo final
        logger.success("üéâ DOWNLOAD CONCLU√çDO!")
        logger.info(f"\nüìÅ Dataset baixado em: {args.output}")
        logger.info(f"üî¢ Vers√£o: {args.version}")
        logger.info(f"üìã Formato: {args.format}")

        if not args.process_after:
            logger.info(f"\nüîÑ Para processar os dados, execute:")
            logger.info(f"   make process-data INPUT={args.output}")

        return 0

    except KeyboardInterrupt:
        logger.warning("‚ö†Ô∏è Download interrompido pelo usu√°rio")
        return 1
    except Exception as e:
        logger.error(f"‚ùå Erro no download: {str(e)}")
        return 1


if __name__ == "__main__":
    exit(main())
