"""
üöÄ Script de Teste: Full Pipeline
Testa o pipeline completo YOLO ‚Üí OCR ‚Üí Parse com outputs detalhados de cada etapa.

Funcionalidades:
- Visualiza√ß√£o da imagem de entrada
- Detec√ß√µes YOLO com bounding boxes e segmenta√ß√£o
- M√°scaras de segmenta√ß√£o (quando dispon√≠vel)
- Crops originais (com fundo branco se usar segmenta√ß√£o)
- Crops pr√©-processados
- Resultados OCR em cada crop
- Parsing de datas
- Resultado final com melhor data destacada

Outputs salvos (em ordem):
- *_1_input.jpg: Imagem original
- *_2_yolo_detection.jpg: Detec√ß√µes YOLO (bbox + overlay de m√°scara)
- *_3a_mask_*.jpg: M√°scaras de segmenta√ß√£o (se dispon√≠vel)
- *_3b_crop_*_original.jpg: Crops originais (com fundo branco se segmentado)
- *_3c_crop_*_processed.jpg: Crops ap√≥s pr√©-processamento
- *_3d_crop_*_ocr.jpg: Visualiza√ß√£o dos resultados OCR
- *_4_result.jpg: Resultado final com datas anotadas

Uso:
    # Processar uma imagem (com outputs detalhados)
    python scripts/pipeline/test_full_pipeline.py --image data/test.jpg
    
    # Processar diret√≥rio
    python scripts/pipeline/test_full_pipeline.py --image-dir data/test_images/
    
    # Com config customizada
    python scripts/pipeline/test_full_pipeline.py --image data/test.jpg --config config/pipeline/full_pipeline.yaml
    
    # Especificar diret√≥rio de output
    python scripts/pipeline/test_full_pipeline.py --image data/test.jpg --output outputs/meus_testes
"""

import argparse
import sys
from pathlib import Path

import cv2
import numpy as np
from loguru import logger

# Adicionar src ao path
sys.path.append(str(Path(__file__).parent.parent.parent))

from src.pipeline.full_pipeline import FullPipeline, load_pipeline_config


def test_single_image(pipeline: FullPipeline, image_path: str, output_dir: str = "outputs/pipeline_steps"):
    """
    Testa pipeline em uma √∫nica imagem com output de cada etapa.
    
    Args:
        pipeline: Inst√¢ncia do pipeline
        image_path: Caminho para imagem
        output_dir: Diret√≥rio para salvar outputs das etapas
    """
    logger.info(f"üì∏ Testando imagem: {image_path}")
    
    # Criar diret√≥rio de output
    output_path = Path(output_dir)
    output_path.mkdir(parents=True, exist_ok=True)
    
    image_name = Path(image_path).stem
    
    # Carregar imagem
    image = cv2.imread(image_path)
    if image is None:
        logger.error(f"‚ùå Erro ao carregar imagem: {image_path}")
        return
    
    # ========================================
    # ETAPA 1: ENTRADA
    # ========================================
    logger.info("\n" + "="*60)
    logger.info("üì• ETAPA 1: IMAGEM DE ENTRADA")
    logger.info("="*60)
    logger.info(f"   Dimens√µes: {image.shape[1]}x{image.shape[0]} pixels")
    logger.info(f"   Canais: {image.shape[2]}")
    logger.info(f"   Tipo: {image.dtype}")
    
    # Salvar imagem original
    input_path = output_path / f"{image_name}_1_input.jpg"
    cv2.imwrite(str(input_path), image)
    logger.info(f"   ‚úÖ Salvo: {input_path}")
    
    # ========================================
    # ETAPA 2: DETEC√á√ÉO YOLO
    # ========================================
    logger.info("\n" + "="*60)
    logger.info("üéØ ETAPA 2: DETEC√á√ÉO YOLO")
    logger.info("="*60)
    
    # Executar detec√ß√£o
    detections = pipeline._detect_regions(image)
    logger.info(f"   Detec√ß√µes encontradas: {len(detections)}")
    
    # Verificar se tem segmenta√ß√£o
    has_segmentation = any('mask' in det and det['mask'] is not None for det in detections)
    logger.info(f"   Modo de detec√ß√£o: {'Segmenta√ß√£o' if has_segmentation else 'BBox apenas'}")
    
    # Visualizar detec√ß√µes
    yolo_viz = image.copy()
    for i, det in enumerate(detections):
        bbox = det['bbox']
        x1, y1, x2, y2 = map(int, bbox)
        
        # Se tiver m√°scara, desenhar contorno da segmenta√ß√£o tamb√©m
        if 'mask' in det and det['mask'] is not None:
            mask = det['mask']
            h, w = image.shape[:2]
            
            # Redimensionar m√°scara se necess√°rio
            if mask.shape != (h, w):
                mask_resized = cv2.resize(mask, (w, h), interpolation=cv2.INTER_LINEAR)
            else:
                mask_resized = mask
            
            # Criar overlay de m√°scara (semi-transparente)
            mask_binary = (mask_resized > 0.5).astype(np.uint8)
            colored_mask = np.zeros_like(image)
            colored_mask[:, :] = (0, 255, 0)  # Verde
            
            # Aplicar m√°scara com transpar√™ncia
            alpha = 0.3
            yolo_viz = np.where(
                mask_binary[:, :, np.newaxis] > 0,
                (yolo_viz * (1 - alpha) + colored_mask * alpha).astype(np.uint8),
                yolo_viz
            )
            
            # Desenhar contorno da m√°scara
            contours, _ = cv2.findContours(mask_binary, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
            cv2.drawContours(yolo_viz, contours, -1, (0, 255, 0), 2)
        
        # Desenhar bbox
        cv2.rectangle(yolo_viz, (x1, y1), (x2, y2), (0, 255, 0), 2)
        
        # Label
        label = f"{det['class_name']} {det['confidence']:.2%}"
        if 'mask' in det and det['mask'] is not None:
            label += " [SEG]"
        cv2.putText(yolo_viz, label, (x1, y1-10), 
                   cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)
        
        logger.info(f"   Detec√ß√£o {i+1}:")
        logger.info(f"      Classe: {det['class_name']}")
        logger.info(f"      Confian√ßa: {det['confidence']:.2%}")
        logger.info(f"      BBox: [{x1}, {y1}, {x2}, {y2}]")
        if 'mask' in det and det['mask'] is not None:
            logger.info(f"      Segmenta√ß√£o: ‚úì (m√°scara {mask.shape})")
    
    # Salvar visualiza√ß√£o YOLO
    yolo_path = output_path / f"{image_name}_2_yolo_detection.jpg"
    cv2.imwrite(str(yolo_path), yolo_viz)
    logger.info(f"   ‚úÖ Salvo: {yolo_path}")
    
    # ========================================
    # ETAPA 3: PR√â-PROCESSAMENTO E OCR
    # ========================================
    logger.info("\n" + "="*60)
    logger.info("üîß ETAPA 3: PR√â-PROCESSAMENTO E OCR")
    logger.info("="*60)
    
    ocr_results = []
    for i, detection in enumerate(detections):
        logger.info(f"\n   Processando detec√ß√£o {i+1}/{len(detections)}...")
        
        # Se tiver m√°scara, salvar visualiza√ß√£o da segmenta√ß√£o
        if 'mask' in detection and detection['mask'] is not None:
            mask = detection['mask']
            h, w = image.shape[:2]
            
            # Redimensionar m√°scara
            if mask.shape != (h, w):
                mask_resized = cv2.resize(mask, (w, h), interpolation=cv2.INTER_LINEAR)
            else:
                mask_resized = mask
            
            # Salvar m√°scara como imagem
            mask_vis = (mask_resized * 255).astype(np.uint8)
            mask_path = output_path / f"{image_name}_3a_mask_{i+1}.jpg"
            cv2.imwrite(str(mask_path), mask_vis)
            logger.info(f"      ‚úÖ M√°scara de segmenta√ß√£o: {mask_path}")
        
        # Extrair crop
        crop = pipeline._extract_crop(image, detection)
        logger.info(f"      Crop: {crop.shape[1]}x{crop.shape[0]} pixels")
        
        # Salvar crop original
        crop_orig_path = output_path / f"{image_name}_3b_crop_{i+1}_original.jpg"
        cv2.imwrite(str(crop_orig_path), crop)
        logger.info(f"      ‚úÖ Crop original: {crop_orig_path}")
        
        # Pr√©-processar
        if pipeline.preprocessor:
            logger.info("      Aplicando pr√©-processamento...")
            crop_processed = pipeline.preprocessor.process(crop)
            
            # Salvar crop processado
            crop_proc_path = output_path / f"{image_name}_3c_crop_{i+1}_processed.jpg"
            cv2.imwrite(str(crop_proc_path), crop_processed)
            logger.info(f"      ‚úÖ Crop processado: {crop_proc_path}")
        else:
            crop_processed = crop
            logger.info("      Sem pr√©-processamento configurado")
        
        # OCR
        logger.info("      Executando OCR...")
        text, confidence = pipeline.ocr_engine.extract_text(crop_processed)
        
        ocr_result = {
            'detection_index': i,
            'text': text,
            'confidence': confidence,
            'bbox': detection['bbox']
        }
        ocr_results.append(ocr_result)
        
        logger.info(f"      üìù Texto: '{text}'")
        logger.info(f"      üìä Confian√ßa: {confidence:.2%}")
        
        # Criar visualiza√ß√£o do OCR no crop
        crop_viz = crop_processed.copy()
        if len(crop_viz.shape) == 2:
            crop_viz = cv2.cvtColor(crop_viz, cv2.COLOR_GRAY2BGR)
        
        # Adicionar texto reconhecido
        h, w = crop_viz.shape[:2]
        cv2.putText(crop_viz, f"OCR: {text}", (10, h-10), 
                   cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 1)
        cv2.putText(crop_viz, f"Conf: {confidence:.2%}", (10, h-30), 
                   cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 1)
        
        crop_ocr_path = output_path / f"{image_name}_3d_crop_{i+1}_ocr.jpg"
        cv2.imwrite(str(crop_ocr_path), crop_viz)
        logger.info(f"      ‚úÖ OCR visualiza√ß√£o: {crop_ocr_path}")
    
    # ========================================
    # ETAPA 4: PARSING DE DATAS
    # ========================================
    logger.info("\n" + "="*60)
    logger.info("üìÖ ETAPA 4: PARSING DE DATAS")
    logger.info("="*60)
    
    dates = []
    for ocr_result in ocr_results:
        parsed_date, parse_confidence = pipeline.date_parser.parse(ocr_result['text'])
        
        if parsed_date:
            date_result = {
                'date': parsed_date,
                'date_str': parsed_date.strftime('%d/%m/%Y'),
                'text': ocr_result['text'],
                'ocr_confidence': ocr_result['confidence'],
                'parse_confidence': parse_confidence,
                'combined_confidence': (ocr_result['confidence'] + parse_confidence) / 2,
                'bbox': ocr_result['bbox']
            }
            dates.append(date_result)
            logger.info(f"   ‚úÖ Data extra√≠da: {date_result['date_str']}")
            logger.info(f"      Texto original: '{ocr_result['text']}'")
            logger.info(f"      Confian√ßa OCR: {ocr_result['confidence']:.2%}")
            logger.info(f"      Confian√ßa Parse: {parse_confidence:.2%}")
            logger.info(f"      Confian√ßa combinada: {date_result['combined_confidence']:.2%}")
        else:
            logger.warning(f"   ‚ùå N√£o foi poss√≠vel extrair data de: '{ocr_result['text']}'")
    
    # Melhor data
    best_date = None
    if dates:
        best_date = max(dates, key=lambda x: x['combined_confidence'])
        logger.info(f"\n   üèÜ MELHOR RESULTADO: {best_date['date_str']} (conf: {best_date['combined_confidence']:.2%})")
    
    # ========================================
    # ETAPA 5: RESULTADO FINAL
    # ========================================
    logger.info("\n" + "="*60)
    logger.info("üìä ETAPA 5: RESULTADO FINAL")
    logger.info("="*60)
    
    # Criar visualiza√ß√£o final
    final_viz = image.copy()
    
    for date_result in dates:
        bbox = date_result['bbox']
        x1, y1, x2, y2 = map(int, bbox)
        
        # Cor baseada na confian√ßa
        conf = date_result['combined_confidence']
        if conf >= 0.8:
            color = (0, 255, 0)  # Verde - alta confian√ßa
        elif conf >= 0.6:
            color = (0, 255, 255)  # Amarelo - m√©dia confian√ßa
        else:
            color = (0, 165, 255)  # Laranja - baixa confian√ßa
        
        # Desenhar bbox
        thickness = 3 if date_result == best_date else 2
        cv2.rectangle(final_viz, (x1, y1), (x2, y2), color, thickness)
        
        # Label com data
        label = f"{date_result['date_str']} ({conf:.1%})"
        label_size = cv2.getTextSize(label, cv2.FONT_HERSHEY_SIMPLEX, 0.6, 2)[0]
        
        # Background para o texto
        cv2.rectangle(final_viz, (x1, y1-label_size[1]-10), 
                     (x1+label_size[0]+10, y1), color, -1)
        
        # Texto
        cv2.putText(final_viz, label, (x1+5, y1-5), 
                   cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 0, 0), 2)
        
        # Marcador de melhor resultado
        if date_result == best_date:
            cv2.putText(final_viz, "MELHOR", (x1, y2+20), 
                       cv2.FONT_HERSHEY_SIMPLEX, 0.5, color, 2)
    
    # Salvar resultado final
    result_path = output_path / f"{image_name}_4_result.jpg"
    cv2.imwrite(str(result_path), final_viz)
    logger.info(f"   ‚úÖ Resultado final salvo: {result_path}")
    
    # Criar resultado resumido
    result = {
        'success': len(dates) > 0,
        'detections': detections,
        'ocr_results': ocr_results,
        'dates': dates,
        'best_date': best_date,
        'processing_time': 0.0,
        'image_name': image_name
    }
    
    # Exibir resultado
    print_result(result)
    
    logger.info(f"\n‚úÖ Todos os outputs salvos em: {output_path}/")
    logger.info(f"   1Ô∏è‚É£  {image_name}_1_input.jpg - Imagem original")
    logger.info(f"   2Ô∏è‚É£  {image_name}_2_yolo_detection.jpg - Detec√ß√µes YOLO")
    logger.info(f"   3Ô∏è‚É£  {image_name}_3a_mask_*.jpg - M√°scaras de segmenta√ß√£o (se dispon√≠vel)")
    logger.info(f"   3Ô∏è‚É£  {image_name}_3b_crop_*_original.jpg - Crops originais")
    logger.info(f"   3Ô∏è‚É£  {image_name}_3c_crop_*_processed.jpg - Crops pr√©-processados")
    logger.info(f"   3Ô∏è‚É£  {image_name}_3d_crop_*_ocr.jpg - Resultados OCR")
    logger.info(f"   4Ô∏è‚É£  {image_name}_4_result.jpg - Resultado final")


def test_directory(pipeline: FullPipeline, image_dir: str, pattern: str = "*.jpg"):
    """
    Testa pipeline em um diret√≥rio.
    
    Args:
        pipeline: Inst√¢ncia do pipeline
        image_dir: Diret√≥rio com imagens
        pattern: Padr√£o de arquivos
    """
    logger.info(f"üìÅ Testando diret√≥rio: {image_dir}")
    
    # Processar todas as imagens
    results = pipeline.process_directory(image_dir, pattern)
    
    # Resumo j√° √© salvo automaticamente pelo pipeline
    logger.info(f"‚úÖ Processamento conclu√≠do! {len(results)} imagens processadas")


def print_result(result: dict):
    """Imprime resultado formatado."""
    print("\n" + "="*60)
    print("üìä RESULTADO DO PIPELINE")
    print("="*60)
    
    print(f"\nüéØ Status: {'‚úÖ Sucesso' if result['success'] else '‚ùå Falha'}")
    print(f"‚è±Ô∏è  Tempo de processamento: {result['processing_time']:.2f}s")
    
    # Detec√ß√µes
    print(f"\nüìç Detec√ß√µes YOLO: {len(result['detections'])}")
    for i, det in enumerate(result['detections']):
        print(f"   {i+1}. {det['class_name']} (conf: {det['confidence']:.2%})")
    
    # OCR
    print(f"\nüîç Resultados OCR: {len(result['ocr_results'])}")
    for i, ocr in enumerate(result['ocr_results']):
        print(f"   {i+1}. '{ocr['text']}' (conf: {ocr['confidence']:.2%})")
    
    # Datas
    print(f"\nüìÖ Datas Extra√≠das: {len(result['dates'])}")
    for i, date in enumerate(result['dates']):
        print(f"   {i+1}. {date['date_str']} (conf: {date['combined_confidence']:.2%})")
    
    # Melhor data
    if result['best_date']:
        best = result['best_date']
        print(f"\nüèÜ MELHOR RESULTADO:")
        print(f"   Data: {best['date_str']}")
        print(f"   Texto original: '{best['text']}'")
        print(f"   Confian√ßa OCR: {best['ocr_confidence']:.2%}")
        print(f"   Confian√ßa Parse: {best['parse_confidence']:.2%}")
        print(f"   Confian√ßa combinada: {best['combined_confidence']:.2%}")
    else:
        print("\n‚ö†Ô∏è  Nenhuma data v√°lida encontrada")
    
    print("\n" + "="*60 + "\n")


def main():
    """Main entry point."""
    parser = argparse.ArgumentParser(
        description="Testa o pipeline completo YOLO ‚Üí OCR ‚Üí Parse",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Exemplos:
  # Processar uma imagem
  python scripts/pipeline/test_full_pipeline.py --image data/test.jpg
  
  # Processar diret√≥rio
  python scripts/pipeline/test_full_pipeline.py --image-dir data/test_images/
  
  # Com config customizada
  python scripts/pipeline/test_full_pipeline.py --image data/test.jpg --config config/pipeline/full_pipeline.yaml
  
  # Processar m√∫ltiplos formatos
  python scripts/pipeline/test_full_pipeline.py --image-dir data/ --pattern "*.png"
        """
    )
    
    # Argumentos
    parser.add_argument(
        '--image',
        type=str,
        help='Caminho para uma imagem'
    )
    
    parser.add_argument(
        '--image-dir',
        type=str,
        help='Diret√≥rio com imagens'
    )
    
    parser.add_argument(
        '--pattern',
        type=str,
        default='*.jpg',
        help='Padr√£o de arquivos (default: *.jpg)'
    )
    
    parser.add_argument(
        '--config',
        type=str,
        default='config/pipeline/full_pipeline.yaml',
        help='Arquivo de configura√ß√£o (default: config/pipeline/full_pipeline.yaml)'
    )
    
    parser.add_argument(
        '--output',
        type=str,
        default='outputs/pipeline_steps',
        help='Diret√≥rio de sa√≠da para etapas (default: outputs/pipeline_steps)'
    )
    
    parser.add_argument(
        '--no-viz',
        action='store_true',
        help='Desabilita salvamento de visualiza√ß√µes'
    )
    
    parser.add_argument(
        '--save-crops',
        action='store_true',
        help='Salva crops das detec√ß√µes'
    )
    
    args = parser.parse_args()
    
    # Validar argumentos
    if not args.image and not args.image_dir:
        parser.error("Especifique --image ou --image-dir")
    
    # Carregar configura√ß√£o
    logger.info(f"üìã Carregando configura√ß√£o: {args.config}")
    config = load_pipeline_config(args.config)
    
    # Sobrescrever op√ß√µes se especificadas
    if args.no_viz:
        config.setdefault('output', {})['save_visualizations'] = False
    
    if args.save_crops:
        config.setdefault('output', {})['save_crops'] = True
    
    # Inicializar pipeline
    logger.info("üöÄ Inicializando pipeline...")
    pipeline = FullPipeline(config)
    
    # Executar testes
    if args.image:
        test_single_image(pipeline, args.image, args.output)
    else:
        test_directory(pipeline, args.image_dir, args.pattern)
    
    logger.info("‚úÖ Teste conclu√≠do!")


if __name__ == '__main__':
    main()
