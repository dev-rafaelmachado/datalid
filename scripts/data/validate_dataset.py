"""
‚úÖ Script de Valida√ß√£o de Dataset
Valida integridade e formato de datasets YOLO.
"""

import argparse
import json
import sys
from pathlib import Path

# Adicionar src ao path
ROOT = Path(__file__).resolve().parent.parent
sys.path.append(str(ROOT))

from loguru import logger
from src.data.validators import DatasetValidator


def parse_arguments():
    """Parse argumentos da linha de comando."""
    parser = argparse.ArgumentParser(
        description="Valida dataset YOLO",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )
    
    parser.add_argument(
        'dataset_path',
        type=str,
        help='Caminho do dataset YOLO (pasta com data.yaml)'
    )
    
    parser.add_argument(
        '--output-report',
        type=str,
        help='Salvar relat√≥rio em arquivo JSON'
    )
    
    parser.add_argument(
        '--detailed',
        action='store_true',
        help='Mostrar informa√ß√µes detalhadas'
    )
    
    parser.add_argument(
        '--fix-issues',
        action='store_true',
        help='Tentar corrigir problemas automaticamente (experimental)'
    )
    
    return parser.parse_args()


def print_validation_summary(result: dict, detailed: bool = False):
    """Imprime resumo da valida√ß√£o."""
    
    logger.info("üìä RESUMO DA VALIDA√á√ÉO")
    logger.info("=" * 40)
    
    # Status geral
    if result['valid']:
        logger.success("‚úÖ Dataset V√ÅLIDO")
    else:
        logger.error("‚ùå Dataset INV√ÅLIDO")
    
    # Estat√≠sticas gerais
    stats = result['stats']
    logger.info(f"\nüìà ESTAT√çSTICAS GERAIS:")
    logger.info(f"  ‚Ä¢ Total de imagens: {stats['total_images']}")
    logger.info(f"  ‚Ä¢ Total de labels: {stats['total_labels']}")
    
    # Informa√ß√µes por split
    logger.info(f"\nüìÅ INFORMA√á√ïES POR SPLIT:")
    for split_name, split_info in stats['splits'].items():
        logger.info(f"  üìÇ {split_name.upper()}:")
        logger.info(f"    ‚Ä¢ Imagens: {split_info['image_count']}")
        logger.info(f"    ‚Ä¢ Labels: {split_info['label_count']}")
        
        if detailed:
            if split_info['orphaned_images']:
                logger.warning(f"    ‚Ä¢ Imagens √≥rf√£s: {len(split_info['orphaned_images'])}")
            if split_info['orphaned_labels']:
                logger.warning(f"    ‚Ä¢ Labels √≥rf√£os: {len(split_info['orphaned_labels'])}")
            if split_info['corrupted_images']:
                logger.error(f"    ‚Ä¢ Imagens corrompidas: {len(split_info['corrupted_images'])}")
            if split_info['invalid_labels']:
                logger.error(f"    ‚Ä¢ Labels inv√°lidos: {len(split_info['invalid_labels'])}")
            
            # Estat√≠sticas de classes
            if split_info['label_stats']:
                most_common = split_info['label_stats'].most_common(3)
                logger.info(f"    ‚Ä¢ Classes mais comuns: {most_common}")
    
    # Data.yaml info
    if 'data_yaml' in stats and stats['data_yaml']:
        data_yaml = stats['data_yaml']
        logger.info(f"\nüìÑ DATA.YAML:")
        logger.info(f"  ‚Ä¢ N√∫mero de classes: {data_yaml.get('nc', 'N/A')}")
        logger.info(f"  ‚Ä¢ Nomes das classes: {data_yaml.get('names', 'N/A')}")
        if 'task' in data_yaml:
            logger.info(f"  ‚Ä¢ Tipo de tarefa: {data_yaml['task']}")
    
    # Erros
    if result['errors']:
        logger.error(f"\n‚ùå ERROS ENCONTRADOS ({len(result['errors'])}):")
        for i, error in enumerate(result['errors'], 1):
            logger.error(f"  {i}. {error}")
    
    # Avisos
    if result['warnings']:
        logger.warning(f"\n‚ö†Ô∏è AVISOS ({len(result['warnings'])}):")
        for i, warning in enumerate(result['warnings'], 1):
            logger.warning(f"  {i}. {warning}")
    
    # Recomenda√ß√µes
    if not result['valid']:
        logger.info(f"\nüí° RECOMENDA√á√ïES:")
        logger.info("  1. Corrija os erros listados acima")
        logger.info("  2. Verifique se todas as imagens est√£o √≠ntegras")
        logger.info("  3. Confirme que os labels seguem o formato YOLO")
        logger.info("  4. Execute novamente ap√≥s as corre√ß√µes")


def save_report(result: dict, output_path: str):
    """Salva relat√≥rio em arquivo JSON."""
    try:
        # Converter Path objects para strings para JSON
        def convert_paths(obj):
            if isinstance(obj, Path):
                return str(obj)
            elif isinstance(obj, dict):
                return {k: convert_paths(v) for k, v in obj.items()}
            elif isinstance(obj, list):
                return [convert_paths(item) for item in obj]
            else:
                return obj
        
        serializable_result = convert_paths(result)
        
        with open(output_path, 'w', encoding='utf-8') as f:
            json.dump(serializable_result, f, indent=2, ensure_ascii=False)
        
        logger.success(f"üìÑ Relat√≥rio salvo em: {output_path}")
        
    except Exception as e:
        logger.error(f"‚ùå Erro salvando relat√≥rio: {str(e)}")


def suggest_fixes(result: dict):
    """Sugere corre√ß√µes para problemas encontrados."""
    logger.info("\nüîß SUGEST√ïES DE CORRE√á√ÉO:")
    
    fixes = []
    
    # Verificar problemas comuns
    for error in result['errors']:
        if "n√£o encontrado" in error.lower():
            fixes.append("‚Ä¢ Verifique se todos os arquivos e diret√≥rios necess√°rios existem")
        elif "corrompida" in error.lower():
            fixes.append("‚Ä¢ Remova ou substitua imagens corrompidas")
        elif "inv√°lido" in error.lower():
            fixes.append("‚Ä¢ Verifique formato dos labels (deve ser: class x_center y_center width height)")
        elif "inconsist√™ncia" in error.lower():
            fixes.append("‚Ä¢ Ajuste o campo 'nc' em data.yaml para corresponder ao n√∫mero de classes")
    
    for warning in result['warnings']:
        if "√≥rf√£" in warning.lower():
            fixes.append("‚Ä¢ Remova imagens sem labels ou crie labels para imagens √≥rf√£s")
        elif "caminho" in warning.lower():
            fixes.append("‚Ä¢ Ajuste os caminhos em data.yaml para apontar para diret√≥rios corretos")
    
    # Remover duplicatas e imprimir
    unique_fixes = list(set(fixes))
    for fix in unique_fixes:
        logger.info(f"  {fix}")
    
    if not unique_fixes:
        logger.info("  ‚Ä¢ Nenhuma sugest√£o espec√≠fica dispon√≠vel")
        logger.info("  ‚Ä¢ Verifique os erros listados acima manualmente")


def main():
    """Fun√ß√£o principal."""
    args = parse_arguments()
    
    logger.info("‚úÖ VALIDA√á√ÉO DE DATASET YOLO")
    logger.info("=" * 50)
    
    dataset_path = Path(args.dataset_path)
    
    if not dataset_path.exists():
        logger.error(f"‚ùå Dataset n√£o encontrado: {dataset_path}")
        sys.exit(1)
    
    logger.info(f"üìÅ Validando dataset: {dataset_path}")
    
    # Executar valida√ß√£o
    try:
        validator = DatasetValidator()
        result = validator.validate_yolo_dataset(dataset_path)
        
        # Imprimir resumo
        print_validation_summary(result, detailed=args.detailed)
        
        # Salvar relat√≥rio se solicitado
        if args.output_report:
            save_report(result, args.output_report)
        
        # Sugerir corre√ß√µes se h√° problemas
        if not result['valid']:
            suggest_fixes(result)
        
        # Status de sa√≠da
        if result['valid']:
            logger.success("\nüéâ Dataset est√° pronto para uso!")
            sys.exit(0)
        else:
            logger.error(f"\n‚ùå Dataset precisa de corre√ß√µes ({len(result['errors'])} erros)")
            sys.exit(1)
            
    except Exception as e:
        logger.error(f"‚ùå Erro durante valida√ß√£o: {str(e)}")
        sys.exit(1)


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        logger.warning("\n‚ö†Ô∏è Valida√ß√£o interrompida pelo usu√°rio")
        sys.exit(1)
    except Exception as e:
        logger.error(f"\n‚ùå Erro inesperado: {str(e)}")
        sys.exit(1)
