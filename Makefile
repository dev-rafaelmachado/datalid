# ========================================
# üöÄ Makefile - Datalid 3.0
# Sistema de Detec√ß√£o de Datas de Validade
# ========================================

# Configura√ß√µes
PYTHON := python
PIP := pip
PROJECT_NAME := datalid
VERSION := 3.0.0

# Caminhos
SRC_DIR := src
SCRIPTS_DIR := scripts
DATA_DIR := data
CONFIG_DIR := config
EXPERIMENTS_DIR := experiments

# FOCO: SEGMENTA√á√ÉO POLIGONAL (padr√£o para o projeto)
# DEFAULT_TASKS 


# Cores para output
RED := \033[31m
GREEN := \033[32m
YELLOW := \033[33m
BLUE := \033[34m
MAGENTA := \033[35m
CYAN := \033[36m
WHITE := \033[37m
RESET := \033[0m

# Configura√ß√µes de split de dados (customiz√°veis)
TRAIN_SPLIT := 0.7
VAL_SPLIT := 0.2
TEST_SPLIT := 0.1

# Configura√ß√µes do Roboflow
API_KEY := crS7dKMHZj3VlfWw40mS
WORKSPACE := projetotransformadorii
PROJECT := tcc_dateset_v2-zkcsu
VERSION := 2
FORMAT := yolov8

# ========================================
# üìã HELP - Lista todos os comandos
# ========================================

.PHONY: help help-analysis

help:
	@echo "$(CYAN)üöÄ Datalid 3.0 - Makefile Commands$(RESET)"
	@echo "$(CYAN)======================================$(RESET)"
	@echo ""
	@echo "$(GREEN)üì¶ INSTALA√á√ÉO:$(RESET)"
	@echo "  install              Instala depend√™ncias de produ√ß√£o"
	@echo "  install-dev          Instala depend√™ncias de desenvolvimento"
	@echo "  install-all          Instala todas as depend√™ncias"
	@echo ""
	@echo "$(GREEN)üîç VALIDA√á√ÉO E TESTE:$(RESET)"
	@echo "  test-cuda            Testa disponibilidade CUDA/GPU"
	@echo "  test-tensorboard     Testa TensorBoard em tempo real ‚≠ê"
	@echo "  validate-env         Valida ambiente Python"
	@echo "  validate-segment     Valida dataset de SEGMENTA√á√ÉO ‚≠ê"
	@echo "  validate-detect      Valida dataset de DETEC√á√ÉO"
	@echo "  diagnose             Diagnostica labels processados ‚≠ê"
	@echo "  diagnose-raw         Diagnostica labels RAW (INPUT=pasta) ‚≠ê"
	@echo "  test                 Executa testes unit√°rios"
	@echo "  test-cov             Executa testes com cobertura"
	@echo ""
	@echo "$(GREEN)üì• DOWNLOAD DO ROBOFLOW:$(RESET)"
	@echo "  download-dataset     Download b√°sico do dataset"
	@echo "  download-and-process Download + processamento autom√°tico"
	@echo "  workflow-complete    Download + processamento + teste"
	@echo ""
	@echo "$(GREEN)üîÑ PROCESSAMENTO DE DADOS (FOCO: SEGMENTA√á√ÉO ‚≠ê):$(RESET)"
	@echo "  process              Processa dados RAW (INPUT=pasta) - SEGMENTA√á√ÉO ‚≠ê"
	@echo "  process-segment      Alias para process - SEGMENTA√á√ÉO ‚≠ê"
	@echo "  process-detect       Processa dados RAW - Apenas Detec√ß√£o (bbox)"
	@echo "  process-both         Processa dados RAW - Segmenta√ß√£o + Detec√ß√£o"
	@echo "  validate-dataset     Valida dataset YOLO (interactive)"
	@echo "  quick-process        Processamento r√°pido (70/20/10) - SEGMENTA√á√ÉO ‚≠ê"
	@echo "  quick-detect         Processamento r√°pido - Detec√ß√£o"
	@echo "  research-process     Processamento para pesquisa (80/10/10) - SEGMENTA√á√ÉO ‚≠ê"
	@echo ""
	@echo "$(GREEN)ü§ñ TREINAMENTO (FOCO: SEGMENTA√á√ÉO POLIGONAL):$(RESET)"
	@echo "  train-nano           Treina YOLOv8n-seg ‚≠ê (segmenta√ß√£o - r√°pido)"
	@echo "  train-small          Treina YOLOv8s-seg ‚≠ê (segmenta√ß√£o - recomendado)"
	@echo "  train-medium         Treina YOLOv8m-seg ‚≠ê (segmenta√ß√£o - melhor)"
	@echo "  train-detect-nano    Treina YOLOv8n (bbox apenas)"
	@echo "  train-detect-small   Treina YOLOv8s (bbox apenas)"
	@echo "  train-detect-medium  Treina YOLOv8m (bbox apenas)"
	@echo ""
	@echo "$(GREEN)üéõÔ∏è TREINAMENTO - SISTEMA NOVO:$(RESET)"
	@echo "  train-quick          Teste r√°pido SEGMENTA√á√ÉO (10 √©pocas) ‚≠ê"
	@echo "  train-quick-detect   Teste r√°pido Detec√ß√£o (10 √©pocas)"
	@echo "  train-dev            Desenvolvimento SEGMENTA√á√ÉO ‚≠ê"
	@echo "  train-dev-detect     Desenvolvimento Detec√ß√£o"
	@echo "  train-final-nano     FINAL TCC - YOLOv8n-seg ‚≠ê"
	@echo "  train-final-small    FINAL TCC - YOLOv8s-seg ‚≠ê"
	@echo "  train-final-medium   FINAL TCC - YOLOv8m-seg ‚≠ê"
	@echo "  train-compare-all    Treina modelos segmenta√ß√£o (compara√ß√£o) ‚≠ê"
	@echo "  train-compare-detect Treina modelos detec√ß√£o (compara√ß√£o)"
	@echo "  train-overnight      Treinamento overnight segmenta√ß√£o (200 √©pocas) ‚≠ê"
	@echo ""
	@echo "$(GREEN)üìä AN√ÅLISE E COMPARA√á√ÉO:$(RESET)"
	@echo "  tensorboard          Inicia TensorBoard"
	@echo "  compare-models       Compara todos os modelos treinados ‚≠ê"
	@echo "  compare-segments     Compara modelos de segmenta√ß√£o ‚≠ê"
	@echo "  compare-detects      Compara modelos de detec√ß√£o"
	@echo "  analyze-errors       An√°lise de erros (requer MODEL= DATA=) ‚≠ê"
	@echo "  analyze-best-model   An√°lise autom√°tica do √∫ltimo modelo ‚≠ê"
	@echo "  help-analysis        Ajuda sobre an√°lise e compara√ß√£o"
	@echo ""
	@echo "$(GREEN)ÔøΩ PREDI√á√ÉO/INFER√äNCIA:$(RESET)"
	@echo "  predict-latest       Predi√ß√£o com √∫ltimo modelo (IMAGE=) ‚≠ê"
	@echo "  test-inference       Teste r√°pido (MODEL= IMAGE=) ‚≠ê"
	@echo "  predict-image        Predi√ß√£o em uma imagem (MODEL= IMAGE=)"
	@echo "  predict-dir          Predi√ß√£o em diret√≥rio (MODEL= DIR=)"
	@echo "  predict-batch        Predi√ß√£o em lote (MODEL= IMAGES='...')"
	@echo ""
	@echo "$(GREEN)ÔøΩüöÄ API E DEPLOY:$(RESET)"
	@echo "  run-api              Inicia API de desenvolvimento"
	@echo "  build-docker         Constr√≥i imagem Docker"
	@echo "  run-docker           Executa container Docker"
	@echo ""
	@echo "$(GREEN)üßπ LIMPEZA:$(RESET)"
	@echo "  clean                Remove arquivos tempor√°rios"
	@echo "  clean-data           Remove dados processados"
	@echo "  clean-models         Remove modelos treinados"
	@echo "  clean-all            Limpeza completa"

# ========================================
# üì¶ INSTALA√á√ÉO
# ========================================

.PHONY: install install-dev install-all
install:
	@echo "$(GREEN)üì¶ Instalando depend√™ncias de produ√ß√£o...$(RESET)"
	$(PIP) install -r requirements.txt

install-dev:
	@echo "$(GREEN)üì¶ Instalando depend√™ncias de desenvolvimento...$(RESET)"
	$(PIP) install -r requirements-dev.txt

install-all: install install-dev
	@echo "$(GREEN)‚úÖ Todas as depend√™ncias instaladas!$(RESET)"

# ========================================
# üîç VALIDA√á√ÉO E TESTE
# ========================================

.PHONY: test-cuda validate-env test test-cov test-tensorboard
test-cuda:
	@echo "$(YELLOW)üß™ Testando CUDA/GPU...$(RESET)"
	$(PYTHON) $(SCRIPTS_DIR)/test_cuda.py

test-tensorboard:
	@echo "$(YELLOW)üß™ Testando TensorBoard em Tempo Real com treinamento REAL...$(RESET)"
	@echo "$(CYAN)üìä Este teste ir√° treinar um modelo por 5 √©pocas$(RESET)"
	@echo "$(CYAN)üîç Abra outro terminal e execute: tensorboard --logdir=experiments$(RESET)"
	@echo ""
	$(PYTHON) $(SCRIPTS_DIR)/test_tensorboard_realtime.py

validate-env:
	@echo "$(YELLOW)üîç Validando ambiente...$(RESET)"
	$(PYTHON) -c "import torch; print(f'PyTorch: {torch.__version__}')"
	$(PYTHON) -c "import cv2; print(f'OpenCV: {cv2.__version__}')"
	$(PYTHON) -c "import ultralytics; print('Ultralytics: OK')"
	@echo "$(GREEN)‚úÖ Ambiente validado!$(RESET)"

test:
	@echo "$(YELLOW)üß™ Executando testes...$(RESET)"
	pytest tests/ -v

test-cov:
	@echo "$(YELLOW)üß™ Executando testes com cobertura...$(RESET)"
	pytest tests/ -v --cov=$(SRC_DIR) --cov-report=html --cov-report=term-missing

# Valida√ß√£o de datasets espec√≠ficos
.PHONY: validate-segment validate-detect

validate-segment:
	@echo "$(BLUE)‚úÖ Validando dataset de SEGMENTA√á√ÉO...$(RESET)"
	$(PYTHON) $(SCRIPTS_DIR)/validate_dataset.py $(DATA_DIR)/processed/v1_segment --detailed

validate-detect:
	@echo "$(BLUE)‚úÖ Validando dataset de DETEC√á√ÉO...$(RESET)"
	$(PYTHON) $(SCRIPTS_DIR)/validate_dataset.py $(DATA_DIR)/processed/v1_detect --detailed

# Diagn√≥stico de labels (para identificar problemas)
.PHONY: diagnose diagnose-raw

diagnose:
	@echo "$(YELLOW)üîç Diagnosticando labels processados...$(RESET)"
	$(PYTHON) $(SCRIPTS_DIR)/diagnose_labels.py $(DATA_DIR)/processed/v1_segment

diagnose-raw:
	@echo "$(YELLOW)üîç Diagnosticando labels RAW...$(RESET)"
ifndef INPUT
	@echo "$(RED)‚ùå Erro: Especifique INPUT=caminho_dos_dados_raw$(RESET)"
	@exit 1
endif
	$(PYTHON) $(SCRIPTS_DIR)/diagnose_labels.py "$(INPUT)"

# ========================================
# üîÑ PROCESSAMENTO DE DADOS
# ========================================

.PHONY: validate-dataset quick-process research-process process-data process-data-auto

validate-dataset:
	@echo "$(BLUE)‚úÖ Valida√ß√£o interativa de dataset...$(RESET)"
	$(PYTHON) $(SCRIPTS_DIR)/validate_dataset.py --help
	@echo ""
	@echo "$(CYAN)Exemplo de uso:$(RESET)"
	@echo "$(PYTHON) $(SCRIPTS_DIR)/validate_dataset.py data/processed/v1_segment --detailed"

quick-process:
	@echo "$(BLUE)üîÑ Processamento r√°pido (70/20/10) - SEGMENTA√á√ÉO...$(RESET)"
	$(PYTHON) $(SCRIPTS_DIR)/process_raw_data.py \
		--raw-path $(DATA_DIR)/raw \
		--output-path $(DATA_DIR)/processed/v1_segment \
		--preset balanced \
		--task-type segment \
		--validate-raw \
		--validate-output

quick-detect:
	@echo "$(BLUE)üîÑ Processamento r√°pido (70/20/10) - DETEC√á√ÉO...$(RESET)"
	$(PYTHON) $(SCRIPTS_DIR)/process_raw_data.py \
		--raw-path $(DATA_DIR)/raw \
		--output-path $(DATA_DIR)/processed/v1_detect \
		--preset balanced \
		--task-type detect \
		--validate-raw \
		--validate-output

# Alias para compatibilidade
quick-process-detect: quick-detect

research-process:
	@echo "$(BLUE)üîÑ Processamento para pesquisa (80/10/10) - SEGMENTA√á√ÉO...$(RESET)"
	$(PYTHON) $(SCRIPTS_DIR)/process_raw_data.py \
		--raw-path $(DATA_DIR)/raw \
		--output-path $(DATA_DIR)/processed/v1_segment \
		--preset research \
		--task-type segment \
		--validate-raw \
		--validate-output

# Processamento de dados com divis√£o customiz√°vel (SEGMENTA√á√ÉO padr√£o) ‚≠ê
process:
	@echo "$(GREEN)üîÑ Processamento de dados - SEGMENTA√á√ÉO POLIGONAL (padr√£o)...$(RESET)"
ifndef INPUT
	@echo "$(RED)‚ùå Erro: Especifique INPUT=caminho_dos_dados_raw$(RESET)"
	@exit 1
endif
	$(PYTHON) $(SCRIPTS_DIR)/process_raw_data.py \
		--input "$(INPUT)" \
		--output $(DATA_DIR)/processed \
		--train-split $(TRAIN_SPLIT) \
		--val-split $(VAL_SPLIT) \
		--test-split $(TEST_SPLIT) \
		--task segment \
		--validate \
		--preview

# Alias para compatibilidade
process-data: process
process-segment: process

# Processamento APENAS detec√ß√£o
process-detect:
	@echo "$(GREEN)üîÑ Processamento de dados - DETEC√á√ÉO...$(RESET)"
ifndef INPUT
	@echo "$(RED)‚ùå Erro: Especifique INPUT=caminho_dos_dados_raw$(RESET)"
	@exit 1
endif
	$(PYTHON) $(SCRIPTS_DIR)/process_raw_data.py \
		--input "$(INPUT)" \
		--output $(DATA_DIR)/processed \
		--train-split $(TRAIN_SPLIT) \
		--val-split $(VAL_SPLIT) \
		--test-split $(TEST_SPLIT) \
		--task detect \
		--validate \
		--preview

# Processar dados sem preview (SEGMENTA√á√ÉO) ‚≠ê
process-auto:
	@echo "$(GREEN)üîÑ Processamento autom√°tico - SEGMENTA√á√ÉO POLIGONAL...$(RESET)"
ifndef INPUT
	@echo "$(RED)‚ùå Erro: Especifique INPUT=caminho_dos_dados_raw$(RESET)"
	@exit 1
endif
	$(PYTHON) $(SCRIPTS_DIR)/process_raw_data.py \
		--input "$(INPUT)" \
		--output $(DATA_DIR)/processed \
		--train-split $(TRAIN_SPLIT) \
		--val-split $(VAL_SPLIT) \
		--test-split $(TEST_SPLIT) \
		--task segment \
		--validate

# Alias para compatibilidade
process-data-auto: process-auto

# Processar AMBOS (segmenta√ß√£o + detec√ß√£o)
process-both:
	@echo "$(GREEN)üîÑ Processamento COMPLETO (SEGMENTA√á√ÉO + DETEC√á√ÉO)...$(RESET)"
ifndef INPUT
	@echo "$(RED)‚ùå Erro: Especifique INPUT=caminho_dos_dados_raw$(RESET)"
	@exit 1
endif
	$(PYTHON) $(SCRIPTS_DIR)/process_raw_data.py \
		--input "$(INPUT)" \
		--output $(DATA_DIR)/processed \
		--train-split $(TRAIN_SPLIT) \
		--val-split $(VAL_SPLIT) \
		--test-split $(TEST_SPLIT) \
		--task both \
		--validate

# ========================================
# ü§ñ TREINAMENTO
# ========================================

.PHONY: train-nano train-small train-medium train-detect-nano train-detect-small train-detect-medium

# COMANDOS PRINCIPAIS - SEGMENTA√á√ÉO ‚≠ê (USA CONFIGURA√á√ïES DOS YAMLs)
train-nano:
	@echo "$(MAGENTA)üèÉ‚Äç‚ôÇÔ∏è Treinando YOLOv8n-seg (SEGMENTA√á√ÉO - carregando config YAML)...$(RESET)"
	$(PYTHON) $(SCRIPTS_DIR)/train_yolo.py \
		--config $(CONFIG_DIR)/yolo/segmentation/yolov8n-seg.yaml \
		--data-path $(DATA_DIR)/processed/v1_segment \
		--name yolov8n_seg_baseline

train-small:
	@echo "$(MAGENTA)üöÄ Treinando YOLOv8s-seg (SEGMENTA√á√ÉO - carregando config YAML)...$(RESET)"
	$(PYTHON) $(SCRIPTS_DIR)/train_yolo.py \
		--config $(CONFIG_DIR)/yolo/segmentation/yolov8s-seg.yaml \
		--data-path $(DATA_DIR)/processed/v1_segment \
		--name yolov8s_seg_final

train-medium:
	@echo "$(MAGENTA)üéØ Treinando YOLOv8m-seg (SEGMENTA√á√ÉO - carregando config YAML)...$(RESET)"
	$(PYTHON) $(SCRIPTS_DIR)/train_yolo.py \
		--config $(CONFIG_DIR)/yolo/segmentation/yolov8m-seg.yaml \
		--data-path $(DATA_DIR)/processed/v1_segment \
		--name yolov8m_seg_best

train-all-seg:
	@echo "$(MAGENTA)üéØ Treinando todos os modelos de segmenta√ß√£o...$(RESET)"
	$(PYTHON) $(SCRIPTS_DIR)/train_yolo.py \
		--config $(CONFIG_DIR)/yolo/segmentation/yolov8n-seg.yaml \
		--data-path $(DATA_DIR)/processed/v1_segment \
		--name yolov8n_seg_baseline
	$(PYTHON) $(SCRIPTS_DIR)/train_yolo.py \
		--config $(CONFIG_DIR)/yolo/segmentation/yolov8s-seg.yaml \
		--data-path $(DATA_DIR)/processed/v1_segment \
		--name yolov8s_seg_final
	$(PYTHON) $(SCRIPTS_DIR)/train_yolo.py \
		--config $(CONFIG_DIR)/yolo/segmentation/yolov8m-seg.yaml \
		--data-path $(DATA_DIR)/processed/v1_segment \
		--name yolov8m_seg_best

# COMANDOS ALTERNATIVOS - DETEC√á√ÉO BBOX (USA CONFIGURA√á√ïES DOS YAMLs)
train-detect-nano:
	@echo "$(MAGENTA)üì¶ Treinando YOLOv8n (DETEC√á√ÉO - carregando config YAML)...$(RESET)"
	$(PYTHON) $(SCRIPTS_DIR)/train_yolo.py \
		--config $(CONFIG_DIR)/yolo/bbox/yolov8n.yaml \
		--data-path $(DATA_DIR)/processed/v1_detect \
		--name yolov8n_detect_baseline

train-detect-small:
	@echo "$(MAGENTA)üì¶ Treinando YOLOv8s (DETEC√á√ÉO - carregando config YAML)...$(RESET)"
	$(PYTHON) $(SCRIPTS_DIR)/train_yolo.py \
		--config $(CONFIG_DIR)/yolo/bbox/yolov8s.yaml \
		--data-path $(DATA_DIR)/processed/v1_detect \
		--name yolov8s_detect_final

train-detect-medium:
	@echo "$(MAGENTA)üì¶ Treinando YOLOv8m (DETEC√á√ÉO - carregando config YAML)...$(RESET)"
	$(PYTHON) $(SCRIPTS_DIR)/train_yolo.py \
		--config $(CONFIG_DIR)/yolo/bbox/yolov8m.yaml \
		--data-path $(DATA_DIR)/processed/v1_detect \
		--name yolov8m_detect_best

train-all-detect:
	@echo "$(MAGENTA)üéØ Treinando todos os modelos de detec√ß√£o...$(RESET)"
	$(PYTHON) $(SCRIPTS_DIR)/train_yolo.py \
		--config $(CONFIG_DIR)/yolo/bbox/yolov8n.yaml \
		--data-path $(DATA_DIR)/processed/v1_detect \
		--name yolov8n_detect_baseline
	$(PYTHON) $(SCRIPTS_DIR)/train_yolo.py \
		--config $(CONFIG_DIR)/yolo/bbox/yolov8s.yaml \
		--data-path $(DATA_DIR)/processed/v1_detect \
		--name yolov8s_detect_final
	$(PYTHON) $(SCRIPTS_DIR)/train_yolo.py \
		--config $(CONFIG_DIR)/yolo/bbox/yolov8m.yaml \
		--data-path $(DATA_DIR)/processed/v1_detect \
		--name yolov8m_detect_best

# ========================================
# üéõÔ∏è TREINAMENTO COM SISTEMA NOVO
# ========================================

# Comandos espec√≠ficos para diferentes cen√°rios
.PHONY: train-quick train-quick-detect train-dev train-dev-detect

train-quick:
	@echo "$(CYAN)üß™ Teste r√°pido SEGMENTA√á√ÉO (10 √©pocas)...$(RESET)"
	python scripts/train_specific.py seg_quick_test --data $(DATA_DIR)/processed/v1_segment --epochs 10

train-quick-detect:
	@echo "$(CYAN)üß™ Teste r√°pido DETEC√á√ÉO (10 √©pocas)...$(RESET)"
	python scripts/train_specific.py quick_test --data $(DATA_DIR)/processed/v1_detect --epochs 10

train-dev:
	@echo "$(BLUE)üîß Desenvolvimento - SEGMENTA√á√ÉO...$(RESET)"
	python scripts/train_specific.py dev_segment --data $(DATA_DIR)/processed/v1_segment

train-dev-detect:
	@echo "$(BLUE)üîß Desenvolvimento - DETEC√á√ÉO...$(RESET)"
	python scripts/train_specific.py dev_detect --data $(DATA_DIR)/processed/v1_detect

# Treinamentos finais para o TCC - SEGMENTA√á√ÉO POLIGONAL ‚≠ê
.PHONY: train-final-nano train-final-small train-final-medium

train-final-nano:
	@echo "$(GREEN)üéì FINAL TCC - YOLOv8n-seg (SEGMENTA√á√ÉO)...$(RESET)"
	python scripts/train_specific.py final_nano_segment --data $(DATA_DIR)/processed/v1_segment

train-final-small:
	@echo "$(GREEN)üéì FINAL TCC - YOLOv8s-seg (SEGMENTA√á√ÉO)...$(RESET)"
	python scripts/train_specific.py final_small_segment --data $(DATA_DIR)/processed/v1_segment

train-final-medium:
	@echo "$(GREEN)üéì FINAL TCC - YOLOv8m-seg (SEGMENTA√á√ÉO)...$(RESET)"
	python scripts/train_specific.py final_medium_segment --data $(DATA_DIR)/processed/v1_segment

# Treinamentos finais DETEC√á√ÉO (alternativo)
.PHONY: train-final-detect-nano train-final-detect-small train-final-detect-medium

train-final-detect-nano:
	@echo "$(GREEN)üéì FINAL TCC - YOLOv8n (DETEC√á√ÉO)...$(RESET)"
	python scripts/train_specific.py final_nano_detect --data $(DATA_DIR)/processed/v1_detect

train-final-detect-small:
	@echo "$(GREEN)üéì FINAL TCC - YOLOv8s (DETEC√á√ÉO)...$(RESET)"
	python scripts/train_specific.py final_small_detect --data $(DATA_DIR)/processed/v1_detect

train-final-detect-medium:
	@echo "$(GREEN)üéì FINAL TCC - YOLOv8m (DETEC√á√ÉO)...$(RESET)"
	python scripts/train_specific.py final_medium_detect --data $(DATA_DIR)/processed/v1_detect

# Compara√ß√µes - SEGMENTA√á√ÉO por padr√£o ‚≠ê
.PHONY: train-compare-all train-compare-detect

train-compare-all:
	@echo "$(YELLOW)üìä Treinando todos os modelos SEGMENTA√á√ÉO para compara√ß√£o...$(RESET)"
	python scripts/train_specific.py compare_nano_segment --data $(DATA_DIR)/processed/v1_segment
	python scripts/train_specific.py compare_small_segment --data $(DATA_DIR)/processed/v1_segment
	python scripts/train_specific.py compare_medium_segment --data $(DATA_DIR)/processed/v1_segment

train-compare-detect:
	@echo "$(YELLOW)üìä Treinando todos os modelos DETEC√á√ÉO para compara√ß√£o...$(RESET)"
	python scripts/train_specific.py compare_nano --data $(DATA_DIR)/processed/v1_detect
	python scripts/train_specific.py compare_small --data $(DATA_DIR)/processed/v1_detect
	python scripts/train_specific.py compare_medium --data $(DATA_DIR)/processed/v1_detect

# Treinamento overnight - SEGMENTA√á√ÉO ‚≠ê
.PHONY: train-overnight train-overnight-detect

train-overnight:
	@echo "$(MAGENTA)üåô Treinamento overnight SEGMENTA√á√ÉO (200 √©pocas)...$(RESET)"
	python scripts/train_specific.py overnight_segment --data $(DATA_DIR)/processed/v1_segment

train-overnight-detect:
	@echo "$(MAGENTA)üåô Treinamento overnight DETEC√á√ÉO (200 √©pocas)...$(RESET)"
	python scripts/train_specific.py overnight --data $(DATA_DIR)/processed/v1_detect

# Configurador interativo
.PHONY: configure
configure:
	@echo "$(CYAN)üéõÔ∏è Configurador interativo...$(RESET)"
	python scripts/configure_training.py

# Listar presets dispon√≠veis
.PHONY: list-presets
list-presets:
	@echo "$(BLUE)üìã Presets dispon√≠veis:$(RESET)"
	@python -c "from src.yolo.presets import yolo_presets; print('\\n'.join(yolo_presets.list_presets()))"



# ========================================
# üìä AN√ÅLISE
# ========================================

.PHONY: tensorboard setup-tensorboard compare-models analyze-errors analyze-best-model compare-segments

setup-tensorboard:
	@echo "$(CYAN)üìä Convertendo logs YOLO para TensorBoard...$(RESET)"
	$(PYTHON) $(SCRIPTS_DIR)/setup_tensorboard.py

tensorboard:
	@echo "$(CYAN)üìà Iniciando TensorBoard...$(RESET)"
	@echo "$(YELLOW)üí° Acesse: http://localhost:6006$(RESET)"
	$(PYTHON) -m tensorboard.main --logdir=$(EXPERIMENTS_DIR) --port=6006 --bind_all

analyze-errors:
	@echo "$(CYAN)üîç Analisando erros...$(RESET)"
ifndef MODEL
	@echo "$(RED)‚ùå Erro: Especifique o modelo com MODEL=path/to/model.pt$(RESET)"
	@exit 1
endif
ifndef DATA
	@echo "$(RED)‚ùå Erro: Especifique o dataset com DATA=path/to/dataset$(RESET)"
	@exit 1
endif
	$(PYTHON) $(SCRIPTS_DIR)/error_analysis.py --model $(MODEL) --data $(DATA)

compare-models:
	@echo "$(CYAN)üìä Comparando modelos...$(RESET)"
	$(PYTHON) $(SCRIPTS_DIR)/compare_models.py --experiments-dir $(EXPERIMENTS_DIR)

# Atalho para analisar o melhor modelo de segmenta√ß√£o
analyze-best-model:
	@echo "$(CYAN)üîç Analisando melhor modelo de segmenta√ß√£o...$(RESET)"
	@latest_model=$$(ls -t $(EXPERIMENTS_DIR)/*/weights/best.pt 2>/dev/null | head -1); \
	if [ -z "$$latest_model" ]; then \
		echo "$(RED)‚ùå Nenhum modelo encontrado em $(EXPERIMENTS_DIR)$(RESET)"; \
		exit 1; \
	fi; \
	echo "$(GREEN)Analisando: $$latest_model$(RESET)"; \
	$(PYTHON) $(SCRIPTS_DIR)/error_analysis.py --model "$$latest_model" --data $(DATA_DIR)/processed/v1_segment

# Comparar apenas modelos de segmenta√ß√£o
compare-segments:
	@echo "$(CYAN)üìä Comparando modelos de SEGMENTA√á√ÉO...$(RESET)"
	$(PYTHON) $(SCRIPTS_DIR)/compare_models.py --experiments-dir $(EXPERIMENTS_DIR) --pattern "*-seg-*"

# Comparar apenas modelos de detec√ß√£o
compare-detects:
	@echo "$(CYAN)üìä Comparando modelos de DETEC√á√ÉO...$(RESET)"
	$(PYTHON) $(SCRIPTS_DIR)/compare_models.py --experiments-dir $(EXPERIMENTS_DIR) --pattern "*-detect-*"

# ========================================
# ÔøΩ PREDI√á√ÉO/INFER√äNCIA
# ========================================

.PHONY: predict predict-image predict-dir predict-batch predict-latest
predict:
	@echo "$(MAGENTA)üîÆ Predi√ß√£o com modelo YOLO$(RESET)"
	@echo "$(CYAN)Use os comandos espec√≠ficos abaixo:$(RESET)"
	@echo "  predict-image       Predi√ß√£o em uma imagem"
	@echo "  predict-dir         Predi√ß√£o em diret√≥rio"
	@echo "  predict-batch       Predi√ß√£o em lote"
	@echo "  predict-latest      Predi√ß√£o com √∫ltimo modelo treinado"

# Predi√ß√£o em uma √∫nica imagem
predict-image:
	@echo "$(GREEN)üîÆ Executando predi√ß√£o em imagem...$(RESET)"
ifndef MODEL
	@echo "$(RED)‚ùå Erro: Especifique MODEL=caminho/para/weights.pt$(RESET)"
	@echo "$(YELLOW)Exemplo: make predict-image MODEL=experiments/yolov8s-seg_final/weights/best.pt IMAGE=test.jpg$(RESET)"
	@exit 1
endif
ifndef IMAGE
	@echo "$(RED)‚ùå Erro: Especifique IMAGE=caminho/para/imagem.jpg$(RESET)"
	@echo "$(YELLOW)Exemplo: make predict-image MODEL=experiments/yolov8s-seg_final/weights/best.pt IMAGE=test.jpg$(RESET)"
	@exit 1
endif
	@echo "$(CYAN)üì∏ Modelo: $(MODEL)$(RESET)"
	@echo "$(CYAN)üñºÔ∏è Imagem: $(IMAGE)$(RESET)"
	@echo "$(CYAN)üíæ Salvando em: outputs/predictions/$(RESET)"
	$(PYTHON) $(SCRIPTS_DIR)/predict_yolo.py \
		--model $(MODEL) \
		--image $(IMAGE) \
		--output-dir outputs/predictions \
		--save-images \
		--save-json \
		--conf $${CONF:-0.25} \
		--iou $${IOU:-0.7}
	@echo "$(GREEN)‚úÖ Predi√ß√£o conclu√≠da!$(RESET)"
	@echo "$(YELLOW)üìÅ Resultados salvos em: outputs/predictions/"

# Predi√ß√£o em diret√≥rio
predict-dir:
	@echo "$(GREEN)üîÆ Executando predi√ß√£o em diret√≥rio...$(RESET)"
ifndef MODEL
	@echo "$(RED)‚ùå Erro: Especifique MODEL=caminho/para/weights.pt$(RESET)"
	@echo "$(YELLOW)Exemplo: make predict-dir MODEL=best.pt DIR=data/test/$(RESET)"
	@exit 1
endif
ifndef DIR
	@echo "$(RED)‚ùå Erro: Especifique DIR=caminho/para/diretorio$(RESET)"
	@echo "$(YELLOW)Exemplo: make predict-dir MODEL=best.pt DIR=data/test/$(RESET)"
	@exit 1
endif
	@echo "$(CYAN)üì∏ Modelo: $(MODEL)$(RESET)"
	@echo "$(CYAN)üìÅ Diret√≥rio: $(DIR)$(RESET)"
	@echo "$(CYAN)üíæ Salvando em: outputs/predictions/$(RESET)"
	$(PYTHON) $(SCRIPTS_DIR)/predict_yolo.py \
		--model $(MODEL) \
		--directory $(DIR) \
		--output-dir outputs/predictions \
		--save-images \
		--save-json \
		--conf $${CONF:-0.25} \
		--iou $${IOU:-0.7}
	@echo "$(GREEN)‚úÖ Predi√ß√£o conclu√≠da!$(RESET)"
	@echo "$(YELLOW)üìÅ Resultados salvos em: outputs/predictions/"

# Predi√ß√£o em lote (lista de imagens)
predict-batch:
	@echo "$(GREEN)üîÆ Executando predi√ß√£o em lote...$(RESET)"
ifndef MODEL
	@echo "$(RED)‚ùå Erro: Especifique MODEL=caminho/para/weights.pt$(RESET)"
	@echo "$(YELLOW)Exemplo: make predict-batch MODEL=best.pt IMAGES='img1.jpg img2.jpg img3.jpg'$(RESET)"
	@exit 1
endif
ifndef IMAGES
	@echo "$(RED)‚ùå Erro: Especifique IMAGES='img1.jpg img2.jpg ...'$(RESET)"
	@echo "$(YELLOW)Exemplo: make predict-batch MODEL=best.pt IMAGES='img1.jpg img2.jpg img3.jpg'$(RESET)"
	@exit 1
endif
	@echo "$(CYAN)üì∏ Modelo: $(MODEL)$(RESET)"
	@echo "$(CYAN)üñºÔ∏è Imagens: $(IMAGES)$(RESET)"
	@echo "$(CYAN)üíæ Salvando em: outputs/predictions/$(RESET)"
	$(PYTHON) $(SCRIPTS_DIR)/predict_yolo.py \
		--model $(MODEL) \
		--batch $(IMAGES) \
		--output-dir outputs/predictions \
		--save-images \
		--save-json \
		--conf $${CONF:-0.25} \
		--iou $${IOU:-0.7}
	@echo "$(GREEN)‚úÖ Predi√ß√£o conclu√≠da!$(RESET)"
	@echo "$(YELLOW)üìÅ Resultados salvos em: outputs/predictions/"

# Predi√ß√£o com √∫ltimo modelo treinado (autom√°tico)
predict-latest:
	@echo "$(GREEN)üîÆ Executando predi√ß√£o com √∫ltimo modelo treinado...$(RESET)"
ifndef IMAGE
	@echo "$(RED)‚ùå Erro: Especifique IMAGE=caminho/para/imagem.jpg$(RESET)"
	@echo "$(YELLOW)Exemplo: make predict-latest IMAGE=test.jpg$(RESET)"
	@exit 1
endif
	$(PYTHON) $(SCRIPTS_DIR)/predict_latest.py \
		--image "$(IMAGE)" \
		--conf $(if $(CONF),$(CONF),0.25) \
		--iou $(if $(IOU),$(IOU),0.7) \
		--save-images \
		--save-json

# Teste r√°pido de infer√™ncia (modelo + imagem customiz√°veis)
test-inference:
	@echo "$(GREEN)üß™ Teste de infer√™ncia...$(RESET)"
ifndef MODEL
	@echo "$(RED)‚ùå Erro: Especifique MODEL=caminho/para/weights.pt$(RESET)"
	@echo "$(YELLOW)Exemplo: make test-inference MODEL=experiments/yolov8s-seg_final/weights/best.pt IMAGE=test.jpg$(RESET)"
	@exit 1
endif
ifndef IMAGE
	@echo "$(RED)‚ùå Erro: Especifique IMAGE=caminho/para/imagem.jpg$(RESET)"
	@echo "$(YELLOW)Exemplo: make test-inference MODEL=experiments/yolov8s-seg_final/weights/best.pt IMAGE=test.jpg$(RESET)"
	@exit 1
endif
	$(PYTHON) $(SCRIPTS_DIR)/test_inference.py \
		--model "$(MODEL)" \
		--image "$(IMAGE)" \
		--conf $(if $(CONF),$(CONF),0.25) \
		--iou $(if $(IOU),$(IOU),0.7) \
		$(if $(CROPS),--save-crops,)

# ========================================
# ÔøΩüöÄ API E DEPLOY
# ========================================

.PHONY: run-api build-docker run-docker
run-api:
	@echo "$(GREEN)üåê Iniciando API de desenvolvimento...$(RESET)"
	@echo "$(YELLOW)üí° Acesse: http://localhost:8000$(RESET)"
	uvicorn src.api.main:app --reload --host 0.0.0.0 --port 8000

build-docker:
	@echo "$(BLUE)üê≥ Construindo imagem Docker...$(RESET)"
	docker build -t $(PROJECT_NAME):$(VERSION) .

run-docker:
	@echo "$(BLUE)üê≥ Executando container Docker...$(RESET)"
	docker run -p 8000:8000 $(PROJECT_NAME):$(VERSION)

# ========================================
# üßπ LIMPEZA
# ========================================

.PHONY: clean clean-data clean-models clean-all
clean:
	@echo "$(RED)üßπ Limpando arquivos tempor√°rios...$(RESET)"
	find . -type f -name "*.pyc" -delete
	find . -type d -name "__pycache__" -delete
	find . -type d -name "*.egg-info" -exec rm -rf {} +
	find . -type f -name ".coverage" -delete
	find . -type d -name "htmlcov" -exec rm -rf {} +
	find . -type d -name ".pytest_cache" -exec rm -rf {} +

clean-data:
	@echo "$(RED)üßπ Removendo dados processados...$(RESET)"
	rm -rf $(DATA_DIR)/processed/*
	@echo "$(YELLOW)‚ö†Ô∏è Dados RAW mantidos em $(DATA_DIR)/raw$(RESET)"

clean-models:
	@echo "$(RED)üßπ Removendo modelos treinados...$(RESET)"
	rm -rf $(EXPERIMENTS_DIR)/*
	rm -rf runs/

clean-all: clean clean-data clean-models
	@echo "$(RED)üßπ Limpeza completa realizada!$(RESET)"

# ========================================
# üéØ COMANDOS DE CONVENI√äNCIA
# ========================================

.PHONY: setup quick-start full-pipeline

setup: install-all test-cuda validate-env
	@echo "$(GREEN)üéâ Setup completo! Sistema pronto para uso.$(RESET)"
	@echo "$(CYAN)üìã Pr√≥ximos passos sugeridos (SEGMENTA√á√ÉO):$(RESET)"
	@echo "  1. make process INPUT=data/raw/dataset  # Processar dados"
	@echo "  2. make train-quick                      # Teste r√°pido"
	@echo "  3. make train-final-small                # Treinamento final"

quick-start: setup quick-process train-quick
	@echo "$(GREEN)üöÄ Quick start completo - SEGMENTA√á√ÉO POLIGONAL!$(RESET)"
	@echo "$(CYAN)Pr√≥ximos passos:$(RESET)"
	@echo "  1. make tensorboard      # Ver m√©tricas"
	@echo "  2. make validate-segment # Validar dataset"
	@echo "  3. make train-final-small # Treinamento final"

quick-start-detect: setup quick-detect train-detect-small
	@echo "$(GREEN)üöÄ Quick start completo - DETEC√á√ÉO (bbox)!$(RESET)"
	@echo "$(CYAN)Pr√≥ximos passos:$(RESET)"
	@echo "  1. make tensorboard     # Ver m√©tricas"
	@echo "  2. make validate-detect # Validar dataset"

full-pipeline: setup research-process train-nano train-small train-medium
	@echo "$(GREEN)üéØ Pipeline completo executado - SEGMENTA√á√ÉO POLIGONAL!$(RESET)"
	@echo "$(CYAN)Resultados em: $(EXPERIMENTS_DIR)$(RESET)"
	@echo "$(YELLOW)üìä Use 'make compare-final' para comparar modelos$(RESET)"

full-pipeline-detect: setup quick-detect train-detect-nano train-detect-small train-detect-medium
	@echo "$(GREEN)üéØ Pipeline completo executado - DETEC√á√ÉO (bbox)!$(RESET)"
	@echo "$(CYAN)Resultados em: $(EXPERIMENTS_DIR)$(RESET)"

# ========================================
# üìù INFORMA√á√ïES
# ========================================

.PHONY: info status version
info:
	@echo "$(CYAN)üìã Informa√ß√µes do Projeto$(RESET)"
	@echo "$(CYAN)========================$(RESET)"
	@echo "Nome: $(PROJECT_NAME)"
	@echo "Vers√£o: $(VERSION)"
	@echo "Python: $(shell $(PYTHON) --version)"
	@echo "Diret√≥rio: $(shell pwd)"

status:
	@echo "$(CYAN)üìä Status do Sistema$(RESET)"
	@echo "$(CYAN)==================$(RESET)"
	@echo "Dados RAW: $(shell find $(DATA_DIR)/raw -name "*.jpg" -o -name "*.png" 2>/dev/null | wc -l) imagens"
	@echo "Dados processados: $(shell find $(DATA_DIR)/processed -name "*.jpg" -o -name "*.png" 2>/dev/null | wc -l) imagens"
	@echo "Experimentos: $(shell find $(EXPERIMENTS_DIR) -maxdepth 1 -type d 2>/dev/null | wc -l) runs"

version:
	@echo "$(PROJECT_NAME) v$(VERSION)"

# ========================================
# üéõÔ∏è COMANDOS DO NOVO SISTEMA
# ========================================

.PHONY: list-experiments list-completed compare-final generate-report cleanup-failed
list-experiments:
	@echo "$(BLUE)üìä Listando experimentos...$(RESET)"
	python scripts/manage_experiments.py list

list-completed:
	@echo "$(GREEN)‚úÖ Experimentos conclu√≠dos...$(RESET)"
	python scripts/manage_experiments.py list --status completed --sort map50

compare-final:
	@echo "$(YELLOW)üìà Comparando experimentos finais...$(RESET)"
	python scripts/manage_experiments.py compare \
		final_yolov8n_detect final_yolov8s_detect final_yolov8m_detect \
		--output experiments/final_comparison.png

generate-report:
	@echo "$(MAGENTA)üìù Gerando relat√≥rio completo...$(RESET)"
	python scripts/manage_experiments.py report --output experiments/relatorio_completo.md

cleanup-failed:
	@echo "$(RED)üóëÔ∏è Limpando experimentos falhados...$(RESET)"
	python scripts/manage_experiments.py cleanup --dry-run

# Comandos de valida√ß√£o
validate-data:
	@echo "$(CYAN)üîç Validando datasets processados...$(RESET)"
	@python -c "from src.data.validators import validate_dataset; \
		import sys; \
		result1 = validate_dataset('$(DATA_DIR)/processed/v1_segment'); \
		result2 = validate_dataset('$(DATA_DIR)/processed/v1_detect'); \
		print('‚úÖ Segmenta√ß√£o:' if result1 else '‚ùå Segmenta√ß√£o:', result1); \
		print('‚úÖ Detec√ß√£o:' if result2 else '‚ùå Detec√ß√£o:', result2)"

test-gpu:
	@echo "$(BLUE)üñ•Ô∏è Testando GPU...$(RESET)"
	python scripts/test_cuda.py

# Workflow completo para TCC - SEGMENTA√á√ÉO ‚≠ê
workflow-tcc:
	@echo "$(MAGENTA)üéì WORKFLOW COMPLETO TCC - SEGMENTA√á√ÉO POLIGONAL$(RESET)"
	@echo "$(CYAN)Este comando executar√° todo o fluxo do TCC automaticamente$(RESET)"
	@echo ""
ifndef INPUT
	@echo "$(RED)‚ùå Erro: Especifique INPUT=caminho_dos_dados_raw$(RESET)"
	@exit 1
endif
	@echo "$(BLUE)1/6 üìä Processando dados SEGMENTA√á√ÉO...$(RESET)"
	make process-auto INPUT=$(INPUT)
	@echo "$(BLUE)2/6 üß™ Teste r√°pido SEGMENTA√á√ÉO...$(RESET)"
	make train-quick
	@echo "$(BLUE)3/6 üöÄ Treinando modelos SEGMENTA√á√ÉO finais...$(RESET)"
	make train-final-nano
	make train-final-small
	make train-final-medium
	@echo "$(BLUE)4/6 üì¶ Treinando DETEC√á√ÉO (compara√ß√£o)...$(RESET)"
	make train-final-detect-small
	@echo "$(BLUE)5/6 üìà Gerando compara√ß√£o...$(RESET)"
	make compare-final
	@echo "$(BLUE)6/6 üìù Gerando relat√≥rio...$(RESET)"
	make generate-report
	@echo "$(GREEN)üéâ WORKFLOW TCC CONCLU√çDO!$(RESET)"
	@echo "$(YELLOW)üìä Resultados em: experiments/$(RESET)"
	@echo "$(YELLOW)üìà Compara√ß√£o: experiments/final_comparison.png$(RESET)"

# Workflow alternativo - DETEC√á√ÉO
workflow-tcc-detect:
	@echo "$(MAGENTA)üéì WORKFLOW TCC - DETEC√á√ÉO$(RESET)"
	@echo ""
ifndef INPUT
	@echo "$(RED)‚ùå Erro: Especifique INPUT=caminho_dos_dados_raw$(RESET)"
	@exit 1
endif
	@echo "$(BLUE)1/5 üìä Processando dados DETEC√á√ÉO...$(RESET)"
	make process-detect INPUT=$(INPUT)
	@echo "$(BLUE)2/5 üß™ Teste r√°pido DETEC√á√ÉO...$(RESET)"
	make train-quick-detect
	@echo "$(BLUE)3/5 üöÄ Treinando modelos DETEC√á√ÉO finais...$(RESET)"
	make train-final-detect-nano
	make train-final-detect-small
	make train-final-detect-medium
	@echo "$(BLUE)4/5 üìà Gerando compara√ß√£o...$(RESET)"
	make compare-final
	@echo "$(BLUE)5/5 üìù Gerando relat√≥rio...$(RESET)"
	make generate-report
	@echo "$(GREEN)üéâ WORKFLOW TCC DETEC√á√ÉO CONCLU√çDO!$(RESET)"

# ========================================
# üìù EXEMPLOS DE USO - PREDI√á√ÉO
# ========================================

.PHONY: help-predict example-predict
help-predict:
	@echo "$(CYAN)üîÆ EXEMPLOS DE USO - PREDI√á√ÉO$(RESET)"
	@echo "$(CYAN)======================================$(RESET)"
	@echo ""
	@echo "$(GREEN)1. Predi√ß√£o em uma imagem:$(RESET)"
	@echo "   make predict-image MODEL=experiments/yolov8s-seg_final/weights/best.pt IMAGE=test.jpg"
	@echo ""
	@echo "$(GREEN)2. Com threshold customizado:$(RESET)"
	@echo "   make predict-image MODEL=best.pt IMAGE=test.jpg CONF=0.5 IOU=0.8"
	@echo ""
	@echo "$(GREEN)3. Predi√ß√£o em diret√≥rio:$(RESET)"
	@echo "   make predict-dir MODEL=best.pt DIR=data/test/"
	@echo ""
	@echo "$(GREEN)4. Predi√ß√£o em lote:$(RESET)"
	@echo "   make predict-batch MODEL=best.pt IMAGES='img1.jpg img2.jpg img3.jpg'"
	@echo ""
	@echo "$(GREEN)5. Predi√ß√£o com √∫ltimo modelo treinado (autom√°tico):$(RESET)"
	@echo "   make predict-latest IMAGE=test.jpg"
	@echo ""
	@echo "$(YELLOW)üí° OP√á√ïES ADICIONAIS:$(RESET)"
	@echo "   CONF=0.5        # Threshold de confidence (padr√£o: 0.25)"
	@echo "   IOU=0.8         # Threshold de IoU NMS (padr√£o: 0.7)"
	@echo ""
	@echo "$(YELLOW)üìÅ RESULTADOS SALVOS EM:$(RESET)"
	@echo "   outputs/predictions/images/     # Imagens com predi√ß√µes"
	@echo "   outputs/predictions/json/       # Resultados em JSON"
	@echo "   outputs/predictions/crops/      # Crops das detec√ß√µes"
	@echo "   outputs/predictions/summary.json # Resumo geral"

# Exemplo pr√°tico de predi√ß√£o (para testes r√°pidos)
example-predict:
	@echo "$(MAGENTA)üîÆ EXEMPLO: Testando predi√ß√£o...$(RESET)"
	@echo "$(CYAN)Este exemplo usa o √∫ltimo modelo treinado$(RESET)"
	@echo ""
	@latest_model=$$(ls -t $(EXPERIMENTS_DIR)/*/weights/best.pt 2>/dev/null | head -1); \
	if [ -z "$$latest_model" ]; then \
		echo "$(RED)‚ùå Nenhum modelo encontrado!$(RESET)"; \
		echo "$(YELLOW)üí° Primeiro treine um modelo com: make train-quick$(RESET)"; \
		exit 1; \
	fi; \
	echo "$(GREEN)‚úì Modelo encontrado: $$latest_model$(RESET)"; \
	echo ""; \
	echo "$(YELLOW)üí° Para testar, execute:$(RESET)"; \
	echo ""; \
	echo "   make predict-image MODEL=\"$$latest_model\" IMAGE=SUA_IMAGEM.jpg"; \
	echo ""; \
	echo "$(CYAN)ou use o atalho:$(RESET)"; \
	echo ""; \
	echo "   make predict-latest IMAGE=SUA_IMAGEM.jpg";