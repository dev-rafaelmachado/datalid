# ========================================
# üöÄ Makefile - Datalid 3.0
# Sistema de Detec√ß√£o de Datas de Validade
# ========================================

# Configura√ß√µes
PYTHON := python
PIP := pip
PROJECT_NAME := datalid
VERSION := 3.0.0

# Caminhos
SRC_DIR := src
SCRIPTS_DIR := scripts
DATA_DIR := data
CONFIG_DIR := config
EXPERIMENTS_DIR := experiments

# FOCO: SEGMENTA√á√ÉO POLIGONAL (padr√£o para o projeto)
# DEFAULT_TASKS 


# Cores para output
RED := \033[31m
GREEN := \033[32m
YELLOW := \033[33m
BLUE := \033[34m
MAGENTA := \033[35m
CYAN := \033[36m
WHITE := \033[37m
RESET := \033[0m

# Configura√ß√µes de split de dados (customiz√°veis)
TRAIN_SPLIT := 0.7
VAL_SPLIT := 0.2
TEST_SPLIT := 0.1

# Configura√ß√µes do Roboflow
API_KEY := crS7dKMHZj3VlfWw40mS
WORKSPACE := projetotransformadorii
PROJECT := tcc_dateset_v2-zkcsu
VERSION := 2
FORMAT := yolov8

# ========================================
# üìã HELP - Lista todos os comandos
# ========================================

.PHONY: help help-analysis

help:
	@echo "$(CYAN)üöÄ Datalid 3.0 - Makefile Commands$(RESET)"
	@echo "$(CYAN)======================================$(RESET)"
	@echo ""
	@echo "$(GREEN)üì¶ INSTALA√á√ÉO:$(RESET)"
	@echo "  install              Instala depend√™ncias de produ√ß√£o"
	@echo "  install-dev          Instala depend√™ncias de desenvolvimento"
	@echo "  install-all          Instala todas as depend√™ncias"
	@echo ""
	@echo "$(GREEN)üîç VALIDA√á√ÉO E TESTE:$(RESET)"
	@echo "  test-cuda            Testa disponibilidade CUDA/GPU"
	@echo "  test-tensorboard     Testa TensorBoard em tempo real ‚≠ê"
	@echo "  validate-env         Valida ambiente Python"
	@echo "  validate-segment     Valida dataset de SEGMENTA√á√ÉO ‚≠ê"
	@echo "  validate-detect      Valida dataset de DETEC√á√ÉO"
	@echo "  diagnose             Diagnostica labels processados ‚≠ê"
	@echo "  diagnose-raw         Diagnostica labels RAW (INPUT=pasta) ‚≠ê"
	@echo "  test                 Executa testes unit√°rios"
	@echo "  test-cov             Executa testes com cobertura"
	@echo ""
	@echo "$(GREEN)üì• DOWNLOAD DO ROBOFLOW:$(RESET)"
	@echo "  download-dataset     Download b√°sico do dataset"
	@echo "  download-and-process Download + processamento autom√°tico"
	@echo "  workflow-complete    Download + processamento + teste"
	@echo ""
	@echo "$(GREEN)üîÑ PROCESSAMENTO DE DADOS (FOCO: SEGMENTA√á√ÉO ‚≠ê):$(RESET)"
	@echo "  process              Processa dados RAW (INPUT=pasta) - SEGMENTA√á√ÉO ‚≠ê"
	@echo "  process-segment      Alias para process - SEGMENTA√á√ÉO ‚≠ê"
	@echo "  process-detect       Processa dados RAW - Apenas Detec√ß√£o (bbox)"
	@echo "  process-both         Processa dados RAW - Segmenta√ß√£o + Detec√ß√£o"
	@echo "  validate-dataset     Valida dataset YOLO (interactive)"
	@echo "  quick-process        Processamento r√°pido (70/20/10) - SEGMENTA√á√ÉO ‚≠ê"
	@echo "  quick-detect         Processamento r√°pido - Detec√ß√£o"
	@echo "  research-process     Processamento para pesquisa (80/10/10) - SEGMENTA√á√ÉO ‚≠ê"
	@echo ""
	@echo "$(GREEN)ü§ñ TREINAMENTO (FOCO: SEGMENTA√á√ÉO POLIGONAL):$(RESET)"
	@echo "  train-nano           Treina YOLOv8n-seg ‚≠ê (segmenta√ß√£o - r√°pido)"
	@echo "  train-small          Treina YOLOv8s-seg ‚≠ê (segmenta√ß√£o - recomendado)"
	@echo "  train-medium         Treina YOLOv8m-seg ‚≠ê (segmenta√ß√£o - melhor)"
	@echo "  train-detect-nano    Treina YOLOv8n (bbox apenas)"
	@echo "  train-detect-small   Treina YOLOv8s (bbox apenas)"
	@echo "  train-detect-medium  Treina YOLOv8m (bbox apenas)"
	@echo ""
	@echo "$(GREEN)üéõÔ∏è TREINAMENTO $(RESET)"
	@echo "  train-quick          Teste r√°pido SEGMENTA√á√ÉO (10 √©pocas) ‚≠ê"
	@echo "  train-quick-detect   Teste r√°pido Detec√ß√£o (10 √©pocas)"
	@echo "  train-dev            Desenvolvimento SEGMENTA√á√ÉO ‚≠ê"
	@echo "  train-dev-detect     Desenvolvimento Detec√ß√£o"
	@echo "  train-final-nano     FINAL TCC - YOLOv8n-seg ‚≠ê"
	@echo "  train-final-small    FINAL TCC - YOLOv8s-seg ‚≠ê"
	@echo "  train-final-medium   FINAL TCC - YOLOv8m-seg ‚≠ê"
	@echo "  train-compare-all    Treina modelos segmenta√ß√£o (compara√ß√£o) ‚≠ê"
	@echo "  train-compare-detect Treina modelos detec√ß√£o (compara√ß√£o)"
	@echo "  train-overnight      Treinamento overnight segmenta√ß√£o (200 √©pocas) ‚≠ê"
	@echo ""
	@echo "$(GREEN)üìä CURVA DE APRENDIZADO (LEARNING CURVES):$(RESET)"
	@echo "  process-fractions    Cria datasets com fra√ß√µes (25%, 50%, 75%, 100%) ‚≠ê"
	@echo "  train-fractions-nano Treina YOLOv8n-seg em todas as fra√ß√µes ‚≠ê"
	@echo "  train-fractions-small Treina YOLOv8s-seg em todas as fra√ß√µes ‚≠ê"
	@echo "  train-fractions-medium Treina YOLOv8m-seg em todas as fra√ß√µes ‚≠ê"
	@echo "  train-all-fractions  Treina TODOS os modelos em todas as fra√ß√µes ‚≠ê"
	@echo "  compare-learning-curves Analisa e compara curvas de aprendizado ‚≠ê"
	@echo ""
	@echo "$(GREEN)ÔøΩ OCR (OPTICAL CHARACTER RECOGNITION):$(RESET)"
	@echo "  ocr-setup            Instala engines OCR ‚≠ê"
	@echo "  ocr-prepare-data     Prepara dataset OCR a partir de detec√ß√µes YOLO ‚≠ê"
	@echo "  ocr-annotate         Interface para anotar ground truth ‚≠ê"
	@echo "  ocr-test             Testa um engine espec√≠fico (ENGINE=paddleocr PREP=medium) ‚≠ê"
	@echo "  ocr-compare          Compara engines (ENGINE=tesseract PREP=heavy) ‚≠ê"
	@echo "  ocr-benchmark        Benchmark completo de todos os engines"
	@echo ""
	@echo "$(CYAN)  PARSeq - Escolha o modelo ideal:$(RESET)"
	@echo "  ocr-parseq           Testa PARSeq BASE (melhor multi-linha) ‚úÖ RECOMENDADO"
	@echo "  ocr-parseq-tiny      Testa PARSeq TINY (r√°pido, ‚ö†Ô∏è ruim multi-linha)"
	@echo "  ocr-parseq-base      Testa PARSeq BASE (melhor multi-linha) ‚≠ê"
	@echo "  ocr-parseq-large     Testa PARSeq LARGE (m√°xima precis√£o) üèÜ"
	@echo "  ocr-parseq-compare   Compara TODOS os modelos PARSeq üìä"
	@echo "  ocr-parseq-analyze   Analisa resultados (sem rodar testes) üìà"
	@echo "  ocr-parseq-setup     Configura e baixa TODOS os modelos PARSeq"
	@echo "  ocr-parseq-validate  Valida implementa√ß√£o completa do PARSeq"
	@echo ""
	@echo "$(MAGENTA)  üöÄ Enhanced PARSeq - Pipeline Robusto (NOVO):$(RESET)"
	@echo "  ocr-enhanced-demo             Demo interativo (IMAGE=test.jpg) ‚≠ê‚≠ê‚≠ê"
	@echo "  ocr-enhanced                  Teste completo (balanceado) ‚≠ê"
	@echo "  ocr-enhanced-fast             Modo r√°pido (sem ensemble)"
	@echo "  ocr-enhanced-quality          Modo alta qualidade (lento)"
	@echo "  ocr-enhanced-batch            Processar diret√≥rio (DIR=...) üì¶"
	@echo "  ocr-enhanced-ablation         Estudo de abla√ß√£o üî¨"
	@echo "  ocr-enhanced-vs-baseline      Comparar vs baseline üìä"
	@echo "  ocr-enhanced-finetune         Fine-tuning üéì"
	@echo "  workflow-enhanced-parseq      Workflow completo üéØ"
	@echo "  help-enhanced-parseq          Ajuda detalhada"
	@echo ""
	@echo "$(CYAN)  Outros comandos OCR:$(RESET)"
	@echo "  ocr-trocr            Testa TrOCR (microsoft/trocr-base-printed) ‚úÖ COM normaliza√ß√£o"
	@echo "  ocr-trocr-quick      Teste r√°pido TrOCR (10 imagens) ‚ö°"
	@echo "  ocr-trocr-benchmark  Benchmark completo do TrOCR üèÜ"
	@echo "  ocr-trocr-validate-brightness  Valida normaliza√ß√£o de brilho üîÜ"
	@echo ""

# ========================================
# üì¶ INSTALA√á√ÉO
# ========================================

.PHONY: install install-dev install-all
install:
	@echo "$(GREEN)üì¶ Instalando depend√™ncias de produ√ß√£o...$(RESET)"
	$(PIP) install -r requirements.txt

install-dev:
	@echo "$(GREEN)üì¶ Instalando depend√™ncias de desenvolvimento...$(RESET)"
	$(PIP) install -r requirements-dev.txt

install-all: install install-dev
	@echo "$(GREEN)‚úÖ Todas as depend√™ncias instaladas!$(RESET)"

# ========================================
# üîç VALIDA√á√ÉO E TESTE
# ========================================

.PHONY: test-cuda validate-env test test-cov test-tensorboard
test-cuda:
	@echo "$(YELLOW)üß™ Testando CUDA/GPU...$(RESET)"
	$(PYTHON) $(SCRIPTS_DIR)/setup/test_cuda.py

validate-env:
	@echo "$(YELLOW)üîç Validando ambiente...$(RESET)"
	$(PYTHON) -c "import torch; print(f'PyTorch: {torch.__version__}')"
	$(PYTHON) -c "import cv2; print(f'OpenCV: {cv2.__version__}')"
	$(PYTHON) -c "import ultralytics; print('Ultralytics: OK')"
	@echo "$(GREEN)‚úÖ Ambiente validado!$(RESET)"

test:
	@echo "$(YELLOW)üß™ Executando testes...$(RESET)"
	pytest tests/ -v

test-cov:
	@echo "$(YELLOW)üß™ Executando testes com cobertura...$(RESET)"
	pytest tests/ -v --cov=$(SRC_DIR) --cov-report=html --cov-report=term-missing

# Valida√ß√£o de datasets espec√≠ficos
.PHONY: validate-segment validate-detect

validate-segment:
	@echo "$(BLUE)‚úÖ Validando dataset de SEGMENTA√á√ÉO...$(RESET)"
	$(PYTHON) $(SCRIPTS_DIR)/data/validate_dataset.py $(DATA_DIR)/processed/v1_segment --detailed

validate-detect:
	@echo "$(BLUE)‚úÖ Validando dataset de DETEC√á√ÉO...$(RESET)"
	$(PYTHON) $(SCRIPTS_DIR)/data/validate_dataset.py $(DATA_DIR)/processed/v1_detect --detailed

# Diagn√≥stico de labels (para identificar problemas)
.PHONY: diagnose diagnose-raw

diagnose:
	@echo "$(YELLOW)üîç Diagnosticando labels processados...$(RESET)"
	$(PYTHON) $(SCRIPTS_DIR)/data/diagnose_labels.py $(DATA_DIR)/processed/v1_segment

diagnose-raw:
	@echo "$(YELLOW)üîç Diagnosticando labels RAW...$(RESET)"
ifndef INPUT
	@echo "$(RED)‚ùå Erro: Especifique INPUT=caminho_dos_dados_raw$(RESET)"
	@exit 1
endif
	$(PYTHON) $(SCRIPTS_DIR)/data/diagnose_labels.py "$(INPUT)"

# ========================================
# üîÑ PROCESSAMENTO DE DADOS
# ========================================

.PHONY: validate-dataset quick-process research-process process-data process-data-auto

validate-dataset:
	@echo "$(BLUE)‚úÖ Valida√ß√£o interativa de dataset...$(RESET)"
	$(PYTHON) $(SCRIPTS_DIR)/data/validate_dataset.py --help
	@echo ""
	@echo "$(CYAN)Exemplo de uso:$(RESET)"
	@echo "$(PYTHON) $(SCRIPTS_DIR)/data/validate_dataset.py data/processed/v1_segment --detailed"

quick-process:
	@echo "$(BLUE)üîÑ Processamento r√°pido (70/20/10) - SEGMENTA√á√ÉO...$(RESET)"
	$(PYTHON) $(SCRIPTS_DIR)/data/process_raw_data.py \
		--raw-path $(DATA_DIR)/raw \
		--output-path $(DATA_DIR)/processed/v1_segment \
		--preset balanced \
		--task-type segment \
		--validate-raw \
		--validate-output

quick-detect:
	@echo "$(BLUE)üîÑ Processamento r√°pido (70/20/10) - DETEC√á√ÉO...$(RESET)"
	$(PYTHON) $(SCRIPTS_DIR)/data/process_raw_data.py \
		--raw-path $(DATA_DIR)/raw \
		--output-path $(DATA_DIR)/processed/v1_detect \
		--preset balanced \
		--task-type detect \
		--validate-raw \
		--validate-output

# Alias para compatibilidade
quick-process-detect: quick-detect

research-process:
	@echo "$(BLUE)üîÑ Processamento para pesquisa (80/10/10) - SEGMENTA√á√ÉO...$(RESET)"
	$(PYTHON) $(SCRIPTS_DIR)/data/process_raw_data.py \
		--raw-path $(DATA_DIR)/raw \
		--output-path $(DATA_DIR)/processed/v1_segment \
		--preset research \
		--task-type segment \
		--validate-raw \
		--validate-output

# ========================================
# üìä PROCESSAMENTO COM FRA√á√ïES (LEARNING CURVES)
# ========================================

# Configura√ß√µes padr√£o para fra√ß√µes
BASE_DATA := data/processed/v1_segment
FRACTIONS_DIR := data/processed/fractions
FRACTIONS := 0.25 0.50 0.75

# Configura√ß√µes para treinamento com fra√ß√µes
FRACTION_CONFIG_DIR := config/yolo/learning_curves
FRACTION_EPOCHS := 100

.PHONY: process-fractions clean-fractions
process-fractions:
	@echo "$(GREEN)üìä Criando datasets com fra√ß√µes dos dados...$(RESET)"
	@echo "$(CYAN)Base: $(BASE_DATA)$(RESET)"
	@echo "$(CYAN)Sa√≠da: $(FRACTIONS_DIR)$(RESET)"
	@echo "$(CYAN)Fra√ß√µes: $(FRACTIONS)$(RESET)"
	@echo ""
	$(PYTHON) $(SCRIPTS_DIR)/data/process_with_fraction.py \
		--base-data $(BASE_DATA) \
		--output-dir $(FRACTIONS_DIR) \
		--fractions $(FRACTIONS) \
		--seed 42

clean-fractions:
	@echo "$(YELLOW)üßπ Removendo datasets fracionados...$(RESET)"
	@if exist "$(FRACTIONS_DIR)" rmdir /s /q "$(FRACTIONS_DIR)"
	@echo "$(GREEN)‚úÖ Datasets fracionados removidos!$(RESET)"

# ========================================
# üèãÔ∏è TREINAMENTO COM FRA√á√ïES (LEARNING CURVES)
# ========================================

# Treinar YOLOv8n-seg em todas as fra√ß√µes
.PHONY: train-fractions-nano
train-fractions-nano:
	@echo "$(BLUE)üèãÔ∏è Treinando YOLOv8n-seg em todas as fra√ß√µes...$(RESET)"
	@echo "$(CYAN)üìä Fra√ß√£o 1/3: 25%...$(RESET)"
	$(PYTHON) $(SCRIPTS_DIR)/training/train_yolo.py \
		--config $(FRACTION_CONFIG_DIR)/yolov8n-seg-fraction.yaml \
		--data-path $(FRACTIONS_DIR)/fraction_25 \
		--name learning_curve_nano_0.25 \
		--project experiments
	@echo "$(CYAN)üìä Fra√ß√£o 2/3: 50%...$(RESET)"
	$(PYTHON) $(SCRIPTS_DIR)/training/train_yolo.py \
		--config $(FRACTION_CONFIG_DIR)/yolov8n-seg-fraction.yaml \
		--data-path $(FRACTIONS_DIR)/fraction_50 \
		--name learning_curve_nano_0.50 \
		--project experiments
	@echo "$(CYAN)üìä Fra√ß√£o 3/3: 75%...$(RESET)"
	$(PYTHON) $(SCRIPTS_DIR)/training/train_yolo.py \
		--config $(FRACTION_CONFIG_DIR)/yolov8n-seg-fraction.yaml \
		--data-path $(FRACTIONS_DIR)/fraction_75 \
		--name learning_curve_nano_0.75 \
		--project experiments
	@echo "$(GREEN)‚úÖ YOLOv8n-seg treinado em todas as fra√ß√µes!$(RESET)"

# Treinar YOLOv8s-seg em todas as fra√ß√µes
.PHONY: train-fractions-small
train-fractions-small:
	@echo "$(BLUE)üèãÔ∏è Treinando YOLOv8s-seg em todas as fra√ß√µes...$(RESET)"
	@echo "$(CYAN)üìä Fra√ß√£o 1/3: 25%...$(RESET)"
	$(PYTHON) $(SCRIPTS_DIR)/training/train_yolo.py \
		--config $(FRACTION_CONFIG_DIR)/yolov8s-seg-fraction.yaml \
		--data-path $(FRACTIONS_DIR)/fraction_25 \
		--name learning_curve_small_0.25 \
		--project experiments
	@echo "$(CYAN)üìä Fra√ß√£o 2/3: 50%...$(RESET)"
	$(PYTHON) $(SCRIPTS_DIR)/training/train_yolo.py \
		--config $(FRACTION_CONFIG_DIR)/yolov8s-seg-fraction.yaml \
		--data-path $(FRACTIONS_DIR)/fraction_50 \
		--name learning_curve_small_0.50 \
		--project experiments
	@echo "$(CYAN)üìä Fra√ß√£o 3/3: 75%...$(RESET)"
	$(PYTHON) $(SCRIPTS_DIR)/training/train_yolo.py \
		--config $(FRACTION_CONFIG_DIR)/yolov8s-seg-fraction.yaml \
		--data-path $(FRACTIONS_DIR)/fraction_75 \
		--name learning_curve_small_0.75 \
		--project experiments
	@echo "$(GREEN)‚úÖ YOLOv8s-seg treinado em todas as fra√ß√µes!$(RESET)"

# Treinar YOLOv8m-seg em todas as fra√ß√µes
.PHONY: train-fractions-medium
train-fractions-medium:
	@echo "$(BLUE)üèãÔ∏è Treinando YOLOv8m-seg em todas as fra√ß√µes...$(RESET)"
	@echo "$(CYAN)üìä Fra√ß√£o 1/3: 25%...$(RESET)"
	$(PYTHON) $(SCRIPTS_DIR)/training/train_yolo.py \
		--config $(FRACTION_CONFIG_DIR)/yolov8m-seg-fraction.yaml \
		--data-path $(FRACTIONS_DIR)/fraction_25 \
		--name learning_curve_medium_0.25 \
		--project experiments
	@echo "$(CYAN)üìä Fra√ß√£o 2/3: 50%...$(RESET)"
	$(PYTHON) $(SCRIPTS_DIR)/training/train_yolo.py \
		--config $(FRACTION_CONFIG_DIR)/yolov8m-seg-fraction.yaml \
		--data-path $(FRACTIONS_DIR)/fraction_50 \
		--name learning_curve_medium_0.50 \
		--project experiments
	@echo "$(CYAN)üìä Fra√ß√£o 3/3: 75%...$(RESET)"
	$(PYTHON) $(SCRIPTS_DIR)/training/train_yolo.py \
		--config $(FRACTION_CONFIG_DIR)/yolov8m-seg-fraction.yaml \
		--data-path $(FRACTIONS_DIR)/fraction_75 \
		--name learning_curve_medium_0.75 \
		--project experiments
	@echo "$(GREEN)‚úÖ YOLOv8m-seg treinado em todas as fra√ß√µes!$(RESET)"

# Treinar TODOS os modelos em todas as fra√ß√µes
.PHONY: train-all-fractions
train-all-fractions:
	@echo "$(MAGENTA)üéØ Treinando TODOS os modelos em todas as fra√ß√µes...$(RESET)"
	@echo "$(YELLOW)‚ö†Ô∏è Isso executar√° 9 treinamentos (pode levar v√°rias horas)$(RESET)"
	@echo ""
	make train-fractions-nano
	make train-fractions-small
	make train-fractions-medium
	@echo "$(GREEN)üéâ Todos os modelos treinados!$(RESET)"

# ========================================
# üìä AN√ÅLISE
# ========================================

.PHONY: tensorboard setup-tensorboard compare-models analyze-errors analyze-best-model compare-segments

setup-tensorboard:
	@echo "$(CYAN)üìä Convertendo logs YOLO para TensorBoard...$(RESET)"
	$(PYTHON) $(SCRIPTS_DIR)/monitoring/setup_tensorboard.py

tensorboard:
	@echo "$(CYAN)üìà Iniciando TensorBoard...$(RESET)"
	@echo "$(YELLOW)üí° Acesse: http://localhost:6006$(RESET)"
	$(PYTHON) -m tensorboard.main --logdir=$(EXPERIMENTS_DIR) --port=6006 --bind_all

analyze-errors:
	@echo "$(CYAN)üîç Analisando erros...$(RESET)"
ifndef MODEL
	@echo "$(RED)‚ùå Erro: Especifique o modelo com MODEL=path/to/model.pt$(RESET)"
	@exit 1
endif
ifndef DATA
	@echo "$(RED)‚ùå Erro: Especifique o dataset com DATA=path/to/dataset$(RESET)"
	@exit 1
endif
	$(PYTHON) $(SCRIPTS_DIR)/evaluation/analyze_errors.py --model $(MODEL) --data $(DATA)

compare-models:
	@echo "$(CYAN)üìä Comparando modelos...$(RESET)"
	$(PYTHON) $(SCRIPTS_DIR)/evaluation/compare_models.py --experiments-dir $(EXPERIMENTS_DIR)

# Atalho para analisar o melhor modelo de segmenta√ß√£o
analyze-best-model:
	@echo "$(CYAN)üîç Analisando melhor modelo de segmenta√ß√£o...$(RESET)"
	@latest_model=$$(ls -t $(EXPERIMENTS_DIR)/*/weights/best.pt 2>/dev/null | head -1); \
	if [ -z "$$latest_model" ]; then \
		echo "$(RED)‚ùå Nenhum modelo encontrado em $(EXPERIMENTS_DIR)$(RESET)"; \
		exit 1; \
	fi; \
	echo "$(GREEN)Analisando: $$latest_model$(RESET)"; \
	$(PYTHON) $(SCRIPTS_DIR)/evaluation/analyze_best_model.py --model "$$latest_model" --data $(DATA_DIR)/processed/v1_segment

# Comparar apenas modelos de segmenta√ß√£o
compare-segments:
	@echo "$(CYAN)üìä Comparando modelos de SEGMENTA√á√ÉO...$(RESET)"
	$(PYTHON) $(SCRIPTS_DIR)/evaluation/compare_models.py --experiments-dir $(EXPERIMENTS_DIR) --pattern "*-seg-*"

# Comparar apenas modelos de detec√ß√£o
compare-detects:
	@echo "$(CYAN)üìä Comparando modelos de DETEC√á√ÉO...$(RESET)"
	$(PYTHON) $(SCRIPTS_DIR)/evaluation/compare_models.py --experiments-dir $(EXPERIMENTS_DIR) --pattern "*-detect-*"

# ========================================
# üìä PREDI√á√ÉO/INFER√äNCIA
# ========================================

.PHONY: predict predict-image predict-dir predict-batch predict-latest
predict:
	@echo "$(MAGENTA)üîÆ Predi√ß√£o com modelo YOLO$(RESET)"
	@echo "$(CYAN)Use os comandos espec√≠ficos abaixo:$(RESET)"
	@echo "  predict-image       Predi√ß√£o em uma imagem"
	@echo "  predict-dir         Predi√ß√£o em diret√≥rio"
	@echo "  predict-batch       Predi√ß√£o em lote"
	@echo "  predict-latest      Predi√ß√£o com √∫ltimo modelo treinado"

# Predi√ß√£o em uma √∫nica imagem
predict-image:
	@echo "$(GREEN)üîÆ Executando predi√ß√£o em imagem...$(RESET)"
ifndef MODEL
	@echo "$(RED)‚ùå Erro: Especifique MODEL=caminho/para/weights.pt$(RESET)"
	@echo "$(YELLOW)Exemplo: make predict-image MODEL=experiments/yolov8s-seg_final/weights/best.pt IMAGE=test.jpg$(RESET)"
	@exit 1
endif
ifndef IMAGE
	@echo "$(RED)‚ùå Erro: Especifique IMAGE=caminho/para/imagem.jpg$(RESET)"
	@echo "$(YELLOW)Exemplo: make predict-image MODEL=experiments/yolov8s-seg_final/weights/best.pt IMAGE=test.jpg$(RESET)"
	@exit 1
endif
	@echo "$(CYAN)üì∏ Modelo: $(MODEL)$(RESET)"
	@echo "$(CYAN)üñºÔ∏è Imagem: $(IMAGE)$(RESET)"
	@echo "$(CYAN)üíæ Salvando em: outputs/predictions/$(RESET)"
	$(PYTHON) $(SCRIPTS_DIR)/inference/predict_yolo.py \
		--model $(MODEL) \
		--image $(IMAGE) \
		--output-dir outputs/predictions \
		--save-images \
		--save-json \
		--conf $${CONF:-0.25} \
		--iou $${IOU:-0.7}
	@echo "$(GREEN)‚úÖ Predi√ß√£o conclu√≠da!$(RESET)"
	@echo "$(YELLOW)üìÅ Resultados salvos em: outputs/predictions/"

# Predi√ß√£o em diret√≥rio
predict-dir:
	@echo "$(GREEN)üîÆ Executando predi√ß√£o em diret√≥rio...$(RESET)"
ifndef MODEL
	@echo "$(RED)‚ùå Erro: Especifique MODEL=caminho/para/weights.pt$(RESET)"
	@echo "$(YELLOW)Exemplo: make predict-dir MODEL=best.pt DIR=data/test/$(RESET)"
	@exit 1
endif
ifndef DIR
	@echo "$(RED)‚ùå Erro: Especifique DIR=caminho/para/diretorio$(RESET)"
	@echo "$(YELLOW)Exemplo: make predict-dir MODEL=best.pt DIR=data/test/$(RESET)"
	@exit 1
endif
	@echo "$(CYAN)üì∏ Modelo: $(MODEL)$(RESET)"
	@echo "$(CYAN)üìÅ Diret√≥rio: $(DIR)$(RESET)"
	@echo "$(CYAN)üíæ Salvando em: outputs/predictions/$(RESET)"
	$(PYTHON) $(SCRIPTS_DIR)/inference/predict_yolo.py \
		--model $(MODEL) \
		--directory $(DIR) \
		--output-dir outputs/predictions \
		--save-images \
		--save-json \
		--conf $${CONF:-0.25} \
		--iou $${IOU:-0.7}
	@echo "$(GREEN)‚úÖ Predi√ß√£o conclu√≠da!$(RESET)"
	@echo "$(YELLOW)üìÅ Resultados salvos em: outputs/predictions/"

# Predi√ß√£o em lote (lista de imagens)
predict-batch:
	@echo "$(GREEN)üîÆ Executando predi√ß√£o em lote...$(RESET)"
ifndef MODEL
	@echo "$(RED)‚ùå Erro: Especifique MODEL=caminho/para/weights.pt$(RESET)"
	@echo "$(YELLOW)Exemplo: make predict-batch MODEL=best.pt IMAGES='img1.jpg img2.jpg img3.jpg'$(RESET)"
	@exit 1
endif
ifndef IMAGES
	@echo "$(RED)‚ùå Erro: Especifique IMAGES='img1.jpg img2.jpg ...'$(RESET)"
	@echo "$(YELLOW)Exemplo: make predict-batch MODEL=best.pt IMAGES='img1.jpg img2.jpg img3.jpg'$(RESET)"
	@exit 1
endif
	@echo "$(CYAN)üì∏ Modelo: $(MODEL)$(RESET)"
	@echo "$(CYAN)üñºÔ∏è Imagens: $(IMAGES)$(RESET)"
	@echo "$(CYAN)üíæ Salvando em: outputs/predictions/$(RESET)"
	$(PYTHON) $(SCRIPTS_DIR)/inference/predict_yolo.py \
		--model $(MODEL) \
		--batch $(IMAGES) \
		--output-dir outputs/predictions \
		--save-images \
		--save-json \
		--conf $${CONF:-0.25} \
		--iou $${IOU:-0.7}
	@echo "$(GREEN)‚úÖ Predi√ß√£o conclu√≠da!$(RESET)"
	@echo "$(YELLOW)üìÅ Resultados salvos em: outputs/predictions/"

# Predi√ß√£o com √∫ltimo modelo treinado (autom√°tico)
predict-latest:
	@echo "$(GREEN)üîÆ Executando predi√ß√£o com √∫ltimo modelo treinado...$(RESET)"
ifndef IMAGE
	@echo "$(RED)‚ùå Erro: Especifique IMAGE=caminho/para/imagem.jpg$(RESET)"
	@echo "$(YELLOW)Exemplo: make predict-latest IMAGE=test.jpg$(RESET)"
	@exit 1
endif
	$(PYTHON) $(SCRIPTS_DIR)/inference/predict_latest.py \
		--image "$(IMAGE)" \
		--conf $(if $(CONF),$(CONF),0.25) \
		--iou $(if $(IOU),$(IOU),0.7) \
		--save-images \
		--save-json

# Teste r√°pido de infer√™ncia (modelo + imagem customiz√°veis)
test-inference:
	@echo "$(GREEN)üß™ Teste de infer√™ncia...$(RESET)"
ifndef MODEL
	@echo "$(RED)‚ùå Erro: Especifique MODEL=caminho/para/weights.pt$(RESET)"
	@echo "$(YELLOW)Exemplo: make test-inference MODEL=experiments/yolov8s-seg_final/weights/best.pt IMAGE=test.jpg$(RESET)"
	@exit 1
endif
ifndef IMAGE
	@echo "$(RED)‚ùå Erro: Especifique IMAGE=caminho/para/imagem.jpg$(RESET)"
	@echo "$(YELLOW)Exemplo: make test-inference MODEL=experiments/yolov8s-seg_final/weights/best.pt IMAGE=test.jpg$(RESET)"
	@exit 1
endif
	$(PYTHON) $(SCRIPTS_DIR)/inference/test_inference.py \
		--model "$(MODEL)" \
		--image "$(IMAGE)" \
		--conf $(if $(CONF),$(CONF),0.25) \
		--iou $(if $(IOU),$(IOU),0.7) \
		$(if $(CROPS),--save-crops,)

# ========================================
# ÔøΩüöÄ API E DEPLOY
# ========================================

.PHONY: run-api build-docker run-docker
run-api:
	@echo "$(GREEN)üåê Iniciando API de desenvolvimento...$(RESET)"
	@echo "$(YELLOW)üí° Acesse: http://localhost:8000$(RESET)"
	uvicorn src.api.main:app --reload --host 0.0.0.0 --port 8000

build-docker:
	@echo "$(BLUE)üê≥ Construindo imagem Docker...$(RESET)"
	docker build -t $(PROJECT_NAME):$(VERSION) .

run-docker:
	@echo "$(BLUE)üê≥ Executando container Docker...$(RESET)"
	docker run -p 8000:8000 $(PROJECT_NAME):$(VERSION)

# ========================================
# üßπ LIMPEZA
# ========================================

.PHONY: clean clean-data clean-models clean-all
clean:
	@echo "$(RED)üßπ Limpando arquivos tempor√°rios...$(RESET)"
	find . -type f -name "*.pyc" -delete
	find . -type d -name "__pycache__" -delete
	find . -type d -name "*.egg-info" -exec rm -rf {} +
	find . -type f -name ".coverage" -delete
	find . -type d -name "htmlcov" -exec rm -rf {} +
	find . -type d -name ".pytest_cache" -exec rm -rf {} +

clean-data:
	@echo "$(RED)üßπ Removendo dados processados...$(RESET)"
	rm -rf $(DATA_DIR)/processed/*
	@echo "$(YELLOW)‚ö†Ô∏è Dados RAW mantidos em $(DATA_DIR)/raw$(RESET)"

clean-models:
	@echo "$(RED)üßπ Removendo modelos treinados...$(RESET)"
	rm -rf $(EXPERIMENTS_DIR)/*
	rm -rf runs/

clean-all: clean clean-data clean-models
	@echo "$(RED)üßπ Limpeza completa realizada!$(RESET)"

# Limpeza espec√≠fica para experimentos de learning curves
.PHONY: clean-learning-curves

clean-learning-curves:
	@echo "$(YELLOW)üßπ Removendo experimentos de learning curves...$(RESET)"
	@if exist "$(EXPERIMENTS_DIR)\learning_curve_*" rmdir /s /q "$(EXPERIMENTS_DIR)\learning_curve_*"
	@if exist "outputs\learning_curves" rmdir /s /q "outputs\learning_curves"
	@echo "$(GREEN)‚úÖ Experimentos de learning curves removidos!$(RESET)"

# ========================================
# üéØ COMANDOS DE CONVENI√äNCIA
# ========================================

.PHONY: setup quick-start full-pipeline

setup: install-all test-cuda validate-env
	@echo "$(GREEN)üéâ Setup completo! Sistema pronto para uso.$(RESET)"
	@echo "$(CYAN)üìã Pr√≥ximos passos sugeridos (SEGMENTA√á√ÉO):$(RESET)"
	@echo "  1. make process INPUT=data/raw/dataset  # Processar dados"
	@echo "  2. make train-quick                      # Teste r√°pido"
	@echo "  3. make train-final-small                # Treinamento final"

quick-start: setup quick-process train-quick
	@echo "$(GREEN)üöÄ Quick start completo - SEGMENTA√á√ÉO POLIGONAL!$(RESET)"
	@echo "$(CYAN)Pr√≥ximos passos:$(RESET)"
	@echo "  1. make tensorboard      # Ver m√©tricas"
	@echo "  2. make validate-segment # Validar dataset"
	@echo "  3. make train-final-small # Treinamento final"

quick-start-detect: setup quick-detect train-detect-small
	@echo "$(GREEN)üöÄ Quick start completo - DETEC√á√ÉO (bbox)!$(RESET)"
	@echo "$(CYAN)Pr√≥ximos passos:$(RESET)"
	@echo "  1. make tensorboard     # Ver m√©tricas"
	@echo "  2. make validate-detect # Validar dataset"

full-pipeline: setup research-process train-nano train-small train-medium
	@echo "$(GREEN)üéØ Pipeline completo executado - SEGMENTA√á√ÉO POLIGONAL!$(RESET)"
	@echo "$(CYAN)Resultados em: $(EXPERIMENTS_DIR)$(RESET)"
	@echo "$(YELLOW)üìä Use 'make compare-final' para comparar modelos$(RESET)"

full-pipeline-detect: setup quick-detect train-detect-nano train-detect-small train-detect-medium
	@echo "$(GREEN)üéØ Pipeline completo executado - DETEC√á√ÉO (bbox)!$(RESET)"
	@echo "$(CYAN)Resultados em: $(EXPERIMENTS_DIR)$(RESET)"

# ========================================
# üìä WORKFLOW DE LEARNING CURVES
# ========================================

# Workflow completo para an√°lise de curvas de aprendizado
.PHONY: workflow-learning-curves workflow-learning-curves-quick

workflow-learning-curves:
	@echo "$(MAGENTA)üìä WORKFLOW COMPLETO - AN√ÅLISE DE CURVAS DE APRENDIZADO$(RESET)"
	@echo "$(CYAN)Este workflow analisa o aprendizado dos modelos com diferentes fra√ß√µes de dados$(RESET)"
	@echo ""
	@echo "$(BLUE)1/4 üìä Criando datasets fracionados (25%%, 50%%, 75%%, 100%%)...$(RESET)"
	make process-fractions
	@echo ""
	@echo "$(BLUE)2/4 ü§ñ Treinando TODOS os modelos em todas as fra√ß√µes...$(RESET)"
	@echo "$(YELLOW)‚ö†Ô∏è  ATEN√á√ÉO: Este processo pode levar MUITO tempo!$(RESET)"
	make train-all-fractions
	@echo ""
	@echo "$(BLUE)3/4 üìà Analisando e comparando resultados...$(RESET)"
	make compare-learning-curves
	@echo ""
	@echo "$(BLUE)4/4 ‚úÖ Workflow conclu√≠do!$(RESET)"
	@echo "$(GREEN)üéâ AN√ÅLISE DE CURVAS DE APRENDIZADO CONCLU√çDA!$(RESET)"
	@echo "$(YELLOW)üìä Datasets fracionados: $(FRACTIONS_DIR)$(RESET)"
	@echo "$(YELLOW)ü§ñ Experimentos: $(EXPERIMENTS_DIR)/learning_curve_*$(RESET)"
	@echo "$(YELLOW)üìà Resultados: outputs/learning_curves/$(RESET)"

# Workflow r√°pido (apenas nano model)
workflow-learning-curves-quick:
	@echo "$(MAGENTA)üìä WORKFLOW R√ÅPIDO - LEARNING CURVES (apenas YOLOv8n-seg)$(RESET)"
	@echo ""
	@echo "$(BLUE)1/3 üìä Criando datasets fracionados...$(RESET)"
	make process-fractions
	@echo ""
	@echo "$(BLUE)2/3 ü§ñ Treinando YOLOv8n-seg em todas as fra√ß√µes...$(RESET)"
	make train-fractions-nano
	@echo ""
	@echo "$(BLUE)3/3 üìà Analisando resultados...$(RESET)"
	make compare-learning-curves
	@echo ""
	@echo "$(GREEN)üéâ AN√ÅLISE R√ÅPIDA CONCLU√çDA!$(RESET)"
	@echo "$(YELLOW)üìà Resultados: outputs/learning_curves/$(RESET)"

# ========================================
# üìù INFORMA√á√ïES
# ========================================

.PHONY: info status version
info:
	@echo "$(CYAN)üìã Informa√ß√µes do Projeto$(RESET)"
	@echo "$(CYAN)========================$(RESET)"
	@echo "Nome: $(PROJECT_NAME)"
	@echo "Vers√£o: $(VERSION)"
	@echo "Python: $(shell $(PYTHON) --version)"
	@echo "Diret√≥rio: $(shell pwd)"

status:
	@echo "$(CYAN)üìä Status do Sistema$(RESET)"
	@echo "$(CYAN)==================$(RESET)"
	@echo "Dados RAW: $(shell find $(DATA_DIR)/raw -name "*.jpg" -o -name "*.png" 2>/dev/null | wc -l) imagens"
	@echo "Dados processados: $(shell find $(DATA_DIR)/processed -name "*.jpg" -o -name "*.png" 2>/dev/null | wc -l) imagens"
	@echo "Experimentos: $(shell find $(EXPERIMENTS_DIR) -maxdepth 1 -type d 2>/dev/null | wc -l) runs"

version:
	@echo "$(PROJECT_NAME) v$(VERSION)"

# ========================================
# üéõÔ∏è COMANDOS DO NOVO SISTEMA
# ========================================

.PHONY: list-experiments list-completed compare-final generate-report cleanup-failed
list-experiments:
	@echo "$(BLUE)üìä Listando experimentos...$(RESET)"
	python $(SCRIPTS_DIR)/experiments/manage_experiments.py list

list-completed:
	@echo "$(GREEN)‚úÖ Experimentos conclu√≠dos...$(RESET)"
	python $(SCRIPTS_DIR)/experiments/manage_experiments.py list --status completed --sort map50

compare-final:
	@echo "$(YELLOW)üìà Comparando experimentos finais...$(RESET)"
	python $(SCRIPTS_DIR)/experiments/manage_experiments.py compare \
		final_yolov8n_detect final_yolov8s_detect final_yolov8m_detect \
		--output experiments/final_comparison.png

generate-report:
	@echo "$(MAGENTA)üìù Gerando relat√≥rio completo...$(RESET)"
	python $(SCRIPTS_DIR)/experiments/manage_experiments.py report --output experiments/relatorio_completo.md

cleanup-failed:
	@echo "$(RED)üóëÔ∏è Limpando experimentos falhados...$(RESET)"
	python $(SCRIPTS_DIR)/experiments/manage_experiments.py cleanup --dry-run


# ========================================
# üî§ OCR (Optical Character Recognition)
# ========================================

.PHONY: ocr-setup ocr-prepare-data ocr-test ocr-compare ocr-benchmark
.PHONY: ocr-trocr ocr-trocr-quick ocr-trocr-benchmark ocr-trocr-validate-brightness
.PHONY: prep-test prep-compare pipeline-test pipeline-run
.PHONY: exp-ocr-comparison viz-ocr-results viz-preprocessing
.PHONY: ocr-test-stats

# Teste do Sistema de Estat√≠sticas
ocr-test-stats:
	@echo "$(BLUE)üß™ Testando sistema de estat√≠sticas OCR...$(RESET)"
	@echo "$(YELLOW)Gerando dados mock e visualiza√ß√µes...$(RESET)"
	$(PYTHON) $(SCRIPTS_DIR)/utils/test_ocr_statistics.py
	@echo "$(GREEN)‚úÖ Teste conclu√≠do!$(RESET)"
	@echo "$(CYAN)üí° Ver resultados em: outputs/test_statistics/report.html$(RESET)"

# Setup e Instala√ß√£o
ocr-setup:
	@echo "$(BLUE)üîß Instalando engines OCR...$(RESET)"
	$(PYTHON) $(SCRIPTS_DIR)/setup/install_ocr_engines.py
	@echo "$(GREEN)‚úÖ OCRs instalados!$(RESET)"

# Teste r√°pido do m√≥dulo
ocr-test-module:
	@echo "$(BLUE)üß™ Testando m√≥dulo OCR...$(RESET)"
	$(PYTHON) $(SCRIPTS_DIR)/ocr/test_ocr_module.py

# Prepara√ß√£o de Dados
ocr-prepare-data:
	@echo "$(BLUE)üì¶ Preparando dataset OCR...$(RESET)"
ifndef DATASET
	@echo "$(YELLOW)üí° Usando dataset padr√£o: data/raw/TCC_DATESET_V2-2$(RESET)"
	$(eval DATASET := data/raw/TCC_DATESET_V2-2)
endif
	@if not exist "$(DATASET)" ( \
		echo "$(RED)‚ùå Dataset n√£o encontrado: $(DATASET)$(RESET)" && \
		echo "$(YELLOW)üí° Certifique-se que o dataset est√° baixado$(RESET)" && \
		exit 1 \
	)
	$(PYTHON) $(SCRIPTS_DIR)/data/prepare_ocr_dataset.py \
		--dataset $(DATASET) \
		--output $(DATA_DIR)/ocr_test \
		--max-samples 50 \
		--padding 10 \
		$(if $(MASK),--use-mask,) \
		$(if $(MASK_STRATEGY),--mask-strategy $(MASK_STRATEGY),)
	@echo "$(GREEN)‚úÖ Dataset OCR preparado em $(DATA_DIR)/ocr_test$(RESET)"
	@echo "$(CYAN)üí° Use MASK=1 para aplicar m√°scaras de segmenta√ß√£o$(RESET)"
	@echo "$(CYAN)üí° Use MASK_STRATEGY=white/black/blur para ajustar background$(RESET)"

# Anota√ß√£o de Ground Truth
ocr-annotate:
	@echo "$(BLUE)üìù Iniciando anota√ß√£o de ground truth...$(RESET)"
	@if not exist "$(DATA_DIR)\ocr_test\images" ( \
		echo "$(RED)‚ùå Dataset OCR n√£o encontrado!$(RESET)" && \
		echo "$(YELLOW)üí° Execute primeiro: make ocr-prepare-data$(RESET)" && \
		exit 1 \
	)
	$(PYTHON) $(SCRIPTS_DIR)/data/annotate_ground_truth.py \
		--data-dir $(DATA_DIR)/ocr_test
	@echo "$(GREEN)‚úÖ Anota√ß√£o conclu√≠da!$(RESET)"

# Teste Individual de Engine
ocr-test:
ifndef ENGINE
	@echo "$(RED)‚ùå Especifique: make ocr-test ENGINE=paddleocr$(RESET)"
	@echo "$(YELLOW)Engines dispon√≠veis: tesseract, easyocr, paddleocr, trocr, parseq$(RESET)"
	@exit 1
endif
	@echo "$(BLUE)üß™ Testando $(ENGINE)...$(RESET)"
	$(PYTHON) -m src.ocr.evaluator \
		--engine $(ENGINE) \
		--config $(CONFIG_DIR)/ocr/$(ENGINE).yaml \
		--test-data $(DATA_DIR)/ocr_test \
		--output outputs/ocr_benchmarks/$(ENGINE) \
		$(if $(PREP),--preprocessing $(PREP),)
	@echo "$(GREEN)‚úÖ Teste do $(ENGINE) conclu√≠do!$(RESET)"
	@echo ""
	@echo "$(CYAN)ÔøΩ RESULTADOS GERADOS:$(RESET)"
	@echo "$(CYAN)  üìÑ HTML Report: outputs/ocr_benchmarks/$(ENGINE)/report.html$(RESET)"
	@echo "$(CYAN)  üìù Markdown Report: outputs/ocr_benchmarks/$(ENGINE)/report.md$(RESET)"
	@echo "$(CYAN)  üìà Estat√≠sticas JSON: outputs/ocr_benchmarks/$(ENGINE)/statistics.json$(RESET)"
	@echo "$(CYAN)  üìä Visualiza√ß√µes: outputs/ocr_benchmarks/$(ENGINE)/*.png$(RESET)"
	@echo ""
	@echo "$(MAGENTA)üí° Gr√°ficos gerados:$(RESET)"
	@echo "   - overview.png - Vis√£o geral de todas as m√©tricas"
	@echo "   - error_distribution.png - An√°lise de distribui√ß√£o de erros"
	@echo "   - confidence_analysis.png - Confian√ßa vs acur√°cia"
	@echo "   - length_analysis.png - Impacto do comprimento do texto"
	@echo "   - time_analysis.png - An√°lise de tempo de processamento"
	@echo "   - character_confusion.png - Matriz de confus√£o de caracteres"
	@echo "   - performance_summary.png - Dashboard de performance"
	@echo "   - error_examples.png - Exemplos de casos com alto erro"
	@echo ""
	@echo "$(CYAN)üí° Cada OCR usa seu pr√©-processamento otimizado automaticamente$(RESET)"
	@echo "$(CYAN)üí° Use PREP=ppro-none para desabilitar ou PREP=ppro-{engine} para especificar$(RESET)"

# Compara√ß√£o de Todos os Engines
ocr-compare:
	@echo "$(MAGENTA)üìä Comparando OCRs...$(RESET)"
	@if not exist "$(DATA_DIR)\ocr_test\ground_truth.json" ( \
		echo "$(RED)‚ùå Ground truth n√£o encontrado!$(RESET)" && \
		echo "$(YELLOW)üí° Anote o ground truth em $(DATA_DIR)/ocr_test/ground_truth.json$(RESET)" && \
		exit 1 \
	)
	$(PYTHON) $(SCRIPTS_DIR)/ocr/benchmark_ocrs.py \
		--config $(CONFIG_DIR)/experiments/ocr_comparison.yaml \
		--output outputs/ocr_benchmarks/comparison \
		$(if $(PREP),--preprocessing $(PREP),) \
		$(if $(ENGINE),--engine $(ENGINE))
	@echo "$(GREEN)‚úÖ Compara√ß√£o conclu√≠da!$(RESET)"
	@echo "$(CYAN)üìä Resultados: outputs/ocr_benchmarks/comparison/$(RESET)"
	@echo "$(CYAN)üí° Cada OCR usa seu pr√©-processamento otimizado: ppro-{engine}$(RESET)"
	@echo "$(CYAN)üí° Configs dispon√≠veis: ppro-none, ppro-tesseract, ppro-easyocr, ppro-paddleocr, ppro-trocr, ppro-parseq$(RESET)"
	@echo "$(CYAN)üí° Use PREP=ppro-none para baseline sem pr√©-processamento$(RESET)"

# Benchmark Completo (todos os engines)
ocr-benchmark:
	@echo "$(MAGENTA)üèÜ Benchmark completo de OCRs...$(RESET)"
	@echo "$(YELLOW)‚ö†Ô∏è  Isso pode levar alguns minutos...$(RESET)"
	@echo ""
	@make ocr-test ENGINE=tesseract
	@make ocr-test ENGINE=easyocr
	@make ocr-test ENGINE=paddleocr
	@make ocr-test ENGINE=trocr
	@make ocr-test ENGINE=parseq
	@make ocr-compare
	@echo "$(GREEN)üéâ Benchmark completo!$(RESET)"

# =============================================================================
# ü§ñ TrOCR - Transformer OCR com Normaliza√ß√£o de Brilho
# =============================================================================
# Comandos para testar TrOCR (microsoft/trocr-base-printed)
# ‚úÖ Integrado com normaliza√ß√£o de brilho, CLAHE e remo√ß√£o de sombras

.PHONY: ocr-trocr ocr-trocr-quick ocr-trocr-benchmark

# Teste padr√£o do TrOCR (com normaliza√ß√£o de brilho)
ocr-trocr:
	@echo "$(BLUE)ü§ñ Testando TrOCR (microsoft/trocr-base-printed)...$(RESET)"
	@echo "$(CYAN)‚ú® Normaliza√ß√£o de brilho: ATIVADA$(RESET)"
	@make ocr-test ENGINE=trocr
	@echo "$(GREEN)‚úÖ TrOCR testado com sucesso!$(RESET)"
	@echo "$(CYAN)üí° Config: config/ocr/trocr.yaml$(RESET)"
	@echo "$(CYAN)üìä Relat√≥rio: outputs/ocr_benchmarks/trocr/report.html$(RESET)"

# Teste r√°pido do TrOCR (apenas primeiras 10 imagens)
ocr-trocr-quick:
	@echo "$(BLUE)‚ö° Teste r√°pido TrOCR...$(RESET)"
	@echo "$(CYAN)‚ú® Normaliza√ß√£o de brilho: ATIVADA$(RESET)"
	@echo "$(YELLOW)üí° Dica: Para teste completo use 'make ocr-trocr'$(RESET)"
	@make ocr-test ENGINE=trocr
	@echo "$(GREEN)‚úÖ Teste r√°pido conclu√≠do!$(RESET)"
	@echo "$(CYAN)üìä Relat√≥rio: outputs/ocr_benchmarks/trocr/report.html$(RESET)"

# Benchmark completo do TrOCR (alias para ocr-trocr)
ocr-trocr-benchmark:
	@echo "$(MAGENTA)üèÜ Benchmark completo do TrOCR...$(RESET)"
	@make ocr-trocr
	@echo ""
	@echo "$(GREEN)üéâ Benchmark TrOCR conclu√≠do!$(RESET)"
	@echo "$(CYAN)üìä M√©tricas dispon√≠veis:$(RESET)"
	@echo "   - Accuracy (taxa de acerto exata)"
	@echo "   - CER (Character Error Rate)"
	@echo "   - WER (Word Error Rate)"
	@echo "   - Tempo de processamento"
	@echo ""
	@echo "$(CYAN)üí° Compare com outros engines: make ocr-benchmark$(RESET)"

# Validar normaliza√ß√£o de brilho do TrOCR
.PHONY: ocr-trocr-validate-brightness

ocr-trocr-validate-brightness:
	@echo "$(BLUE)üîÜ Validando normaliza√ß√£o de brilho do TrOCR...$(RESET)"
	@echo "$(CYAN)Este teste valida:$(RESET)"
	@echo "   - Imagens muito brilhantes (brightness > 200)"
	@echo "   - Imagens muito escuras (brightness < 80)"
	@echo "   - Imagens com brilho adequado"
	@echo ""
	$(PYTHON) scripts/ocr/test_trocr_brightness.py
	@echo ""
	@echo "$(GREEN)‚úÖ Valida√ß√£o conclu√≠da!$(RESET)"
	@echo "$(CYAN)üìä Resultados: outputs/trocr_brightness_test/$(RESET)"

# Valida√ß√£o completa do PARSeq
.PHONY: ocr-parseq-validate

ocr-parseq-validate:
	@echo "$(BLUE)üîç Validando implementa√ß√£o do PARSeq TINE...$(RESET)"
	$(PYTHON) $(SCRIPTS_DIR)/ocr/validate_parseq.py
	@echo "$(GREEN)‚úÖ Valida√ß√£o conclu√≠da!$(RESET)"

# Comparar OCR com diferentes configura√ß√µes de pr√©-processamento
.PHONY: ocr-compare-preprocessing

ocr-compare-preprocessing:
	@echo "$(MAGENTA)üìä Comparando OCRs com diferentes configura√ß√µes de pr√©-processamento...$(RESET)"
	@echo ""
	@echo "$(BLUE)1/6 üîç Testando SEM pr√©-processamento (baseline)...$(RESET)"
	@make ocr-compare PREP=ppro-none
	@move outputs\ocr_benchmarks\comparison outputs\ocr_benchmarks\comparison_ppro-none
	@echo ""
	@echo "$(BLUE)2/6 üîç Testando pr√©-processamento TESSERACT...$(RESET)"
	@make ocr-compare PREP=ppro-tesseract
	@move outputs\ocr_benchmarks\comparison outputs\ocr_benchmarks\comparison_ppro-tesseract
	@echo ""
	@echo "$(BLUE)3/6 üîç Testando pr√©-processamento EASYOCR...$(RESET)"
	@make ocr-compare PREP=ppro-easyocr
	@move outputs\ocr_benchmarks\comparison outputs\ocr_benchmarks\comparison_ppro-easyocr
	@echo ""
	@echo "$(BLUE)4/6 üîç Testando pr√©-processamento PADDLEOCR...$(RESET)"
	@make ocr-compare PREP=ppro-paddleocr
	@move outputs\ocr_benchmarks\comparison outputs\ocr_benchmarks\comparison_ppro-paddleocr
	@echo ""
	@echo "$(BLUE)5/6 üîç Testando pr√©-processamento TROCR...$(RESET)"
	@make ocr-compare PREP=ppro-trocr
	@move outputs\ocr_benchmarks\comparison outputs\ocr_benchmarks\comparison_ppro-trocr
	@echo ""
	@echo "$(BLUE)6/6 üîç Testando pr√©-processamento PARSEQ...$(RESET)"
	@make ocr-compare PREP=ppro-parseq
	@move outputs\ocr_benchmarks\comparison outputs\ocr_benchmarks\comparison_ppro-parseq
	@echo ""
	@echo "$(GREEN)üéâ Compara√ß√£o completa de pr√©-processamento conclu√≠da!$(RESET)"
	@echo "$(CYAN)üìä Resultados em: outputs/ocr_benchmarks/$(RESET)"
	@echo "   - comparison_ppro-none/       (sem pr√©-processamento - baseline)"
	@echo "   - comparison_ppro-tesseract/  (otimizado para Tesseract)"
	@echo "   - comparison_ppro-easyocr/    (otimizado para EasyOCR)"
	@echo "   - comparison_ppro-paddleocr/  (otimizado para PaddleOCR)"
	@echo "   - comparison_ppro-trocr/      (otimizado para TrOCR)"
	@echo "   - comparison_ppro-parseq/     (otimizado para PARSeq TINE)"

# Teste de Pr√©-processamento
prep-test:
ifndef CONFIG
	@echo "$(RED)‚ùå Especifique: make prep-test CONFIG=ppro-paddleocr$(RESET)"
	@echo "$(YELLOW)Configs dispon√≠veis: ppro-none, ppro-tesseract, ppro-easyocr, ppro-paddleocr, ppro-trocr, ppro-parseq$(RESET)"
	@exit 1
endif
	@echo "$(BLUE)üîç Testando preprocessing $(CONFIG)...$(RESET)"
	$(PYTHON) $(SCRIPTS_DIR)/ocr/test_preprocessing.py \
		--config $(CONFIG_DIR)/preprocessing/$(CONFIG).yaml \
		--test-data $(DATA_DIR)/ocr_test \
		--visualize \
		--max-samples 10
	@echo "$(GREEN)‚úÖ Teste de preprocessing conclu√≠do!$(RESET)"
	@echo "$(CYAN)üìä Resultados: outputs/preprocessing_tests/$(CONFIG)/$(RESET)"

# Compara√ß√£o de Configura√ß√µes de Pr√©-processamento
prep-compare:
	@echo "$(MAGENTA)üìä Comparando configura√ß√µes de preprocessing...$(RESET)"
	$(PYTHON) $(SCRIPTS_DIR)/ocr/test_preprocessing.py \
		--compare-all \
		--test-data $(DATA_DIR)/ocr_test \
		--output outputs/preprocessing_tests \
		--visualize \
		--max-samples 10
	@echo "$(GREEN)‚úÖ Compara√ß√£o de preprocessing conclu√≠da!$(RESET)"
	@echo "$(CYAN)üìä Resultados: outputs/preprocessing_tests/$(RESET)"
	@echo "$(CYAN)üí° Compara√ß√£o inclui: ppro-none, ppro-tesseract, ppro-easyocr, ppro-paddleocr, ppro-trocr$(RESET)"

# Demonstra√ß√£o interativa de Pr√©-processamento (Novas funcionalidades)
prep-demo:
	@echo "$(MAGENTA)üé® Demonstra√ß√£o de Pr√©-processamento...$(RESET)"
	@echo "$(CYAN)üí° Demonstra normalize_colors e sharpen em a√ß√£o$(RESET)"
	$(PYTHON) $(SCRIPTS_DIR)/ocr/demo_preprocessing.py
	@echo "$(GREEN)‚úÖ Demonstra√ß√£o conclu√≠da!$(RESET)"
	@echo "$(CYAN)üìä Resultados salvos em: outputs/preprocessing_demo/$(RESET)"

# Pipeline Completo (YOLO + OCR + Parse)
pipeline-test:
	@echo "$(MAGENTA)üöÄ Testando pipeline completo...$(RESET)"
	$(PYTHON) -m src.pipeline.expiry_date \
		--config $(CONFIG_DIR)/pipeline/full_pipeline.yaml \
		--test-data $(DATA_DIR)/test_images \
		--output outputs/pipeline_test
	@echo "$(GREEN)‚úÖ Pipeline testado!$(RESET)"

# Executar Pipeline em Imagem
pipeline-run:
ifndef IMAGE
	@echo "$(RED)‚ùå Especifique: make pipeline-run IMAGE=test.jpg$(RESET)"
	@exit 1
endif
	@echo "$(BLUE)üîç Processando $(IMAGE)...$(RESET)"
	$(PYTHON) -m src.pipeline.expiry_date \
		--config $(CONFIG_DIR)/pipeline/full_pipeline.yaml \
		--image "$(IMAGE)" \
		--visualize \
		--save-output
	@echo "$(GREEN)‚úÖ Pipeline executado!$(RESET)"

# Experimento: Compara√ß√£o Completa de OCR
exp-ocr-comparison:
	@echo "$(MAGENTA)üìä Rodando experimento: Compara√ß√£o OCR...$(RESET)"
	$(PYTHON) $(SCRIPTS_DIR)/experiments/run_ocr_comparison.py \
		--config $(CONFIG_DIR)/experiments/ocr_comparison.yaml
	@echo "$(GREEN)üéâ Experimento conclu√≠do!$(RESET)"

# Visualiza√ß√£o de Resultados OCR
viz-ocr-results:
	@echo "$(BLUE)üìà Gerando visualiza√ß√µes OCR...$(RESET)"
	$(PYTHON) $(SCRIPTS_DIR)/ocr/visualize_results.py \
		--results outputs/ocr_benchmarks/comparison/comparison_summary.csv \
		--output outputs/visualizations/ocr_comparison.png \
		--type ocr
	@echo "$(GREEN)‚úÖ Visualiza√ß√£o gerada: outputs/visualizations/ocr_comparison.png$(RESET)"

# Visualiza√ß√£o de Resultados de Pr√©-processamento
viz-preprocessing:
	@echo "$(BLUE)üìà Gerando visualiza√ß√µes preprocessing...$(RESET)"
	$(PYTHON) $(SCRIPTS_DIR)/ocr/visualize_results.py \
		--results outputs/preprocessing_tests/results.csv \
		--output outputs/visualizations/preprocessing_comparison.png \
		--type preprocessing
	@echo "$(GREEN)‚úÖ Visualiza√ß√£o gerada: outputs/visualizations/preprocessing_comparison.png$(RESET)"

# Workflow Completo OCR (para TCC)
workflow-ocr:
	@echo "$(MAGENTA)üéì WORKFLOW COMPLETO OCR$(RESET)"
	@echo "$(CYAN)Este comando executar√° todo o fluxo de OCR automaticamente$(RESET)"
	@echo ""
	@echo "$(BLUE)1/5 üîß Instalando engines...$(RESET)"
	@make ocr-setup
	@echo ""
	@echo "$(BLUE)2/5 üì¶ Preparando dataset...$(RESET)"
	@make ocr-prepare-data
	@echo ""
	@echo "$(BLUE)3/5 üß™ Executando benchmark...$(RESET)"
	@make ocr-compare
	@echo ""
	@echo "$(BLUE)4/5 üîç Testando preprocessing...$(RESET)"
	@make prep-compare
	@echo ""
	@echo "$(BLUE)5/5 üìä Gerando visualiza√ß√µes...$(RESET)"
	@make viz-ocr-results
	@make viz-preprocessing
	@echo ""
	@echo "$(GREEN)üéâ WORKFLOW OCR CONCLU√çDO!$(RESET)"
	@echo "$(YELLOW)üìä Resultados em: outputs/ocr_benchmarks/ e outputs/preprocessing_tests/$(RESET)"
	@echo "$(YELLOW)üìà Visualiza√ß√µes em: outputs/visualizations/$(RESET)"

# Limpeza de Dados OCR
clean-ocr:
	@echo "$(RED)üßπ Limpando dados OCR...$(RESET)"
	@if exist "$(DATA_DIR)\ocr_test" rmdir /s /q "$(DATA_DIR)\ocr_test"
	@if exist "outputs\ocr_benchmarks" rmdir /s /q "outputs\ocr_benchmarks"
	@if exist "outputs\preprocessing_tests" rmdir /s /q "outputs\preprocessing_tests"
	@echo "$(GREEN)‚úÖ Dados OCR limpos!$(RESET)"




# Workflow completo para TCC - SEGMENTA√á√ÉO ‚≠ê
workflow-tcc:
	@echo "$(MAGENTA)üéì WORKFLOW COMPLETO TCC - SEGMENTA√á√ÉO POLIGONAL$(RESET)"
	@echo "$(CYAN)Este comando executar√° todo o fluxo do TCC automaticamente$(RESET)"
	@echo ""
ifndef INPUT
	@echo "$(RED)‚ùå Erro: Especifique INPUT=caminho_dos_dados_raw$(RESET)"
	@exit 1
endif
	@echo "$(BLUE)1/6 üìä Processando dados SEGMENTA√á√ÉO...$(RESET)"
	make process-auto INPUT=$(INPUT)
	@echo "$(BLUE)2/6 üß™ Teste r√°pido SEGMENTA√á√ÉO...$(RESET)"
	make train-quick
	@echo "$(BLUE)3/6 üöÄ Treinando modelos SEGMENTA√á√ÉO finais...$(RESET)"
	make train-final-nano
	make train-final-small
	make train-final-medium
	@echo "$(BLUE)4/6 üì¶ Treinando DETEC√á√ÉO (compara√ß√£o)...$(RESET)"
	make train-final-detect-small
	@echo "$(BLUE)5/6 üìà Gerando compara√ß√£o...$(RESET)"
	make compare-final
	@echo "$(BLUE)6/6 üìù Gerando relat√≥rio...$(RESET)"
	make generate-report
	@echo "$(GREEN)üéâ WORKFLOW TCC CONCLU√çDO!$(RESET)"
	@echo "$(YELLOW)üìä Resultados em: experiments/$(RESET)"
	@echo "$(YELLOW)üìà Compara√ß√£o: experiments/final_comparison.png$(RESET)"

# Workflow alternativo - DETEC√á√ÉO
workflow-tcc-detect:
	@echo "$(MAGENTA)üéì WORKFLOW TCC - DETEC√á√ÉO$(RESET)"
	@echo ""
ifndef INPUT
	@echo "$(RED)‚ùå Erro: Especifique INPUT=caminho_dos_dados_raw$(RESET)"
	@exit 1
endif
	@echo "$(BLUE)1/5 üìä Processando dados DETEC√á√ÉO...$(RESET)"
	make process-detect INPUT=$(INPUT)
	@echo "$(BLUE)2/5 üß™ Teste r√°pido DETEC√á√ÉO...$(RESET)"
	make train-quick-detect
	@echo "$(BLUE)3/5 üöÄ Treinando modelos DETEC√á√ÉO finais...$(RESET)"
	make train-final-detect-nano
	make train-final-detect-small
	make train-final-detect-medium
	@echo "$(BLUE)4/5 üìà Gerando compara√ß√£o...$(RESET)"
	make compare-final
	@echo "$(BLUE)5/5 üìù Gerando relat√≥rio...$(RESET)"
	make generate-report
	@echo "$(GREEN)üéâ WORKFLOW TCC DETEC√á√ÉO CONCLU√çDO!$(RESET)"

# =============================================================================
# üöÄ ENHANCED PARSeq - Pipeline Robusto com Multi-linha, Ensemble e Reranking
# =============================================================================
# Pipeline completo com:
# - Line detection (detec√ß√£o e separa√ß√£o de linhas)
# - Geometric normalization (deskew, perspective)
# - Photometric normalization (CLAHE, denoise, shadow removal)
# - Ensemble de variantes (m√∫ltiplas alturas, CLAHE, denoise)
# - Reranking inteligente (confidence, dict match, consensus)
# - Contextual postprocessing (ambiguity mapping, format fixing)

.PHONY: ocr-enhanced ocr-enhanced-demo ocr-enhanced-batch ocr-enhanced-ablation
.PHONY: ocr-enhanced-fast ocr-enhanced-quality ocr-enhanced-experiment
.PHONY: ocr-enhanced-finetune ocr-enhanced-finetune-prepare ocr-enhanced-eval

# ========================================
# 1. DEMO & QUICK TESTS
# ========================================

# Demo interativo do Enhanced PARSeq
ocr-enhanced-demo:
	@echo "$(MAGENTA)üöÄ Enhanced PARSeq - Demo Interativo$(RESET)"
	@echo "$(CYAN)Pipeline: Line Detection ‚Üí Normalization ‚Üí Ensemble ‚Üí Reranking ‚Üí Postprocessing$(RESET)"
ifndef IMAGE
	@echo "$(YELLOW)‚ö†Ô∏è Usando imagem de teste padr√£o...$(RESET)"
	$(PYTHON) $(SCRIPTS_DIR)/ocr/demo_enhanced_parseq.py \
		--config $(CONFIG_DIR)/ocr/parseq_enhanced.yaml \
		--mode demo
else
	@echo "$(GREEN)üì∑ Processando: $(IMAGE)$(RESET)"
	$(PYTHON) $(SCRIPTS_DIR)/ocr/demo_enhanced_parseq.py \
		--config $(CONFIG_DIR)/ocr/parseq_enhanced.yaml \
		--image "$(IMAGE)" \
		--mode demo \
		--visualize
endif
	@echo "$(GREEN)‚úÖ Demo conclu√≠do!$(RESET)"
	@echo "$(CYAN)üìä Resultados salvos em: outputs/enhanced_parseq/demo/$(RESET)"

# Teste simples com configura√ß√£o balanceada (padr√£o)
ocr-enhanced:
	@echo "$(BLUE)üî§ Testando Enhanced PARSeq (modo balanceado)...$(RESET)"
	$(PYTHON) -m src.ocr.evaluator \
		--engine parseq_enhanced \
		--config $(CONFIG_DIR)/ocr/parseq_enhanced.yaml \
		--test-data $(DATA_DIR)/ocr_test \
		--output outputs/ocr_benchmarks/parseq_enhanced
	@echo "$(GREEN)‚úÖ Enhanced PARSeq testado com sucesso!$(RESET)"
	@echo ""
	@echo "$(CYAN)üìä RESULTADOS DETALHADOS GERADOS:$(RESET)"
	@echo "$(CYAN)  üìÑ HTML Report: outputs/ocr_benchmarks/parseq_enhanced/report.html$(RESET)"
	@echo "$(CYAN)  üìù Markdown Report: outputs/ocr_benchmarks/parseq_enhanced/report.md$(RESET)"
	@echo "$(CYAN)  üìà Estat√≠sticas JSON: outputs/ocr_benchmarks/parseq_enhanced/statistics.json$(RESET)"
	@echo "$(CYAN)  üìä Visualiza√ß√µes: outputs/ocr_benchmarks/parseq_enhanced/*.png$(RESET)"
	@echo ""
	@echo "$(MAGENTA)üí° An√°lises avan√ßadas inclu√≠das:$(RESET)"
	@echo "   ‚úÖ Estat√≠sticas b√°sicas (exact match, CER, confidence)"
	@echo "   üìä An√°lise de erros por categoria (perfect, low, medium, high)"
	@echo "   üî§ Matriz de confus√£o de caracteres"
	@echo "   üìù An√°lise em n√≠vel de palavras"
	@echo "   üìè Impacto do comprimento do texto"
	@echo "   ‚è±Ô∏è  An√°lise de desempenho e tempo"
	@echo "   üìà Correla√ß√£o confian√ßa vs precis√£o"
	@echo "   üéØ Dashboard de performance completo"

# Teste r√°pido (sem ensemble, para velocidade)
ocr-enhanced-fast:
	@echo "$(BLUE)‚ö° Enhanced PARSeq - Modo R√°pido$(RESET)"
	@echo "$(YELLOW)‚ö†Ô∏è Ensemble desabilitado para maior velocidade$(RESET)"
	$(PYTHON) $(SCRIPTS_DIR)/ocr/demo_enhanced_parseq.py \
		--config $(CONFIG_DIR)/ocr/parseq_enhanced.yaml \
		--preset fast \
		--test-data $(DATA_DIR)/ocr_test \
		--output outputs/ocr_benchmarks/parseq_enhanced_fast
	@echo "$(GREEN)‚úÖ Teste r√°pido conclu√≠do!$(RESET)"

# Teste com m√°xima qualidade (ensemble completo, modelo large)
ocr-enhanced-quality:
	@echo "$(BLUE)üèÜ Enhanced PARSeq - Modo Alta Qualidade$(RESET)"
	@echo "$(CYAN)Configura√ß√£o: modelo LARGE + 5 variantes + reranking$(RESET)"
	$(PYTHON) $(SCRIPTS_DIR)/ocr/demo_enhanced_parseq.py \
		--config $(CONFIG_DIR)/ocr/parseq_enhanced_full.yaml \
		--preset high_quality \
		--test-data $(DATA_DIR)/ocr_test \
		--output outputs/ocr_benchmarks/parseq_enhanced_quality
	@echo "$(GREEN)‚úÖ Teste de qualidade conclu√≠do!$(RESET)"
	@echo "$(YELLOW)‚ö†Ô∏è Modo lento, mas m√°xima precis√£o$(RESET)"

# ========================================
# 2. BATCH PROCESSING
# ========================================

# Processar diret√≥rio completo
ocr-enhanced-batch:
ifndef DIR
	@echo "$(RED)‚ùå Especifique: make ocr-enhanced-batch DIR=caminho/do/diretorio$(RESET)"
	@echo "$(YELLOW)Exemplo: make ocr-enhanced-batch DIR=data/ocr_test$(RESET)"
	@exit 1
endif
	@echo "$(BLUE)üì¶ Enhanced PARSeq - Processamento em Lote$(RESET)"
	@echo "$(CYAN)Diret√≥rio: $(DIR)$(RESET)"
	$(PYTHON) $(SCRIPTS_DIR)/ocr/demo_enhanced_parseq.py \
		--config $(CONFIG_DIR)/ocr/parseq_enhanced.yaml \
		--mode batch \
		--input-dir "$(DIR)" \
		--output outputs/enhanced_parseq/batch \
		--visualize \
		
		--save-metrics
	@echo "$(GREEN)‚úÖ Processamento em lote conclu√≠do!$(RESET)"
	@echo "$(CYAN)üìä Resultados: outputs/enhanced_parseq/batch/$(RESET)"

# ========================================
# 3. ABLATION STUDY
# ========================================

# Estudo de abla√ß√£o completo
ocr-enhanced-ablation:
	@echo "$(MAGENTA)üî¨ Enhanced PARSeq - Estudo de Abla√ß√£o$(RESET)"
	@echo "$(CYAN)Testando todas as combina√ß√µes de componentes...$(RESET)"
	@echo ""
	@echo "$(YELLOW)Componentes:$(RESET)"
	@echo "  1Ô∏è‚É£ Line Detection"
	@echo "  2Ô∏è‚É£ Geometric Normalization"
	@echo "  3Ô∏è‚É£ Photometric Normalization"
	@echo "  4Ô∏è‚É£ Ensemble + Reranking"
	@echo "  5Ô∏è‚É£ Contextual Postprocessing"
	@echo ""
	$(PYTHON) $(SCRIPTS_DIR)/ocr/demo_enhanced_parseq.py \
		--config $(CONFIG_DIR)/ocr/parseq_enhanced.yaml \
		--mode ablation \
		--test-data $(DATA_DIR)/ocr_test \
		--output outputs/enhanced_parseq/ablation
	@echo ""
	@echo "$(GREEN)‚úÖ Ablation study conclu√≠do!$(RESET)"
	@echo "$(CYAN)üìä Resultados detalhados: outputs/enhanced_parseq/ablation/$(RESET)"
	@echo "$(CYAN)üìà Gr√°fico de abla√ß√£o: outputs/enhanced_parseq/ablation/ablation_results.png$(RESET)"

# Abla√ß√£o r√°pida (subset de combina√ß√µes)
ocr-enhanced-ablation-quick:
:
	@echo "$(BLUE)üî¨ Enhanced PARSeq - Abla√ß√£o R√°pida$(RESET)"
	@echo "$(YELLOW)Testando combina√ß√µes principais...$(RESET)"
	$(PYTHON) $(SCRIPTS_DIR)/ocr/run_ablation.py \
		--config $(CONFIG_DIR)/ocr/parseq_enhanced.yaml \
		--test-data $(DATA_DIR)/ocr_test \
		--output outputs/enhanced_parseq/ablation_quick \
		--quick-mode
	
	@echo "$(GREEN)‚úÖ Abla√ß√£o r√°pida conclu√≠da!$(RESET)"

# ========================================
# 4. EXPERIMENTOS COMPARATIVOS
# ========================================

# Comparar Enhanced vs Baseline
ocr-enhanced-vs-baseline:
	@echo "$(MAGENTA)üìä Comparando Enhanced PARSeq vs Baseline$(RESET)"
	@echo ""
	@echo "$(BLUE)1/2 Rodando Baseline (PARSeq simples)...$(RESET)"
	@make ocr-parseq-base
	@echo ""
	@echo "$(BLUE)2/2 Rodando Enhanced PARSeq...$(RESET)"
	@make ocr-enhanced
	@echo ""
	@echo "$(CYAN)üìä Gerando compara√ß√£o...$(RESET)"
	$(PYTHON) $(SCRIPTS_DIR)/ocr/compare_enhanced_vs_baseline.py \
		--baseline outputs/ocr_benchmarks/parseq_base \
		--enhanced outputs/ocr_benchmarks/parseq_enhanced \
		--output outputs/enhanced_parseq/comparison
	@echo "$(GREEN)‚úÖ Compara√ß√£o conclu√≠da!$(RESET)"
	@echo "$(CYAN)üìà Gr√°ficos: outputs/enhanced_parseq/comparison/$(RESET)"

# Experimento completo (todos os presets)
ocr-enhanced-experiment:
	@echo "$(MAGENTA)üß™ Enhanced PARSeq - Experimento Completo$(RESET)"
	@echo "$(CYAN)Testando todos os presets: fast, balanced, high_quality$(RESET)"
	@echo ""
	$(PYTHON) $(SCRIPTS_DIR)/ocr/run_experiment.py \
		--config $(CONFIG_DIR)/ocr/parseq_enhanced_full.yaml \
		--test-data $(DATA_DIR)/ocr_test \
		--output outputs/enhanced_parseq/experiments \
		--presets fast balanced high_quality \
		--compare-all
	@echo ""
	@echo "$(GREEN)‚úÖ Experimento completo conclu√≠do!$(RESET)"
	@echo "$(CYAN)üìä Resultados: outputs/enhanced_parseq/experiments/$(RESET)"

# ========================================
# 5. FINE-TUNING
# ========================================

# Preparar dados para fine-tuning
ocr-enhanced-finetune-prepare:
	@echo "$(BLUE)üì¶ Preparando dados para fine-tuning...$(RESET)"
ifndef TRAIN_DIR
	@echo "$(RED)‚ùå Especifique: make ocr-enhanced-finetune-prepare TRAIN_DIR=caminho VAL_DIR=caminho$(RESET)"
	@echo "$(YELLOW)Exemplo: make ocr-enhanced-finetune-prepare TRAIN_DIR=data/ocr_train VAL_DIR=data/ocr_val$(RESET)"
	@exit 1
endif
ifndef VAL_DIR
	@echo "$(RED)‚ùå Especifique VAL_DIR=caminho$(RESET)"
	@exit 1
endif
	@echo "$(CYAN)Train: $(TRAIN_DIR)$(RESET)"
	@echo "$(CYAN)Val: $(VAL_DIR)$(RESET)"
	$(PYTHON) $(SCRIPTS_DIR)/ocr/prepare_finetune_data.py \
		--train-dir "$(TRAIN_DIR)" \
		--val-dir "$(VAL_DIR)" \
		--output data/ocr_finetuning \
		--format json \
		--validate
	@echo "$(GREEN)‚úÖ Dados preparados!$(RESET)"
	@echo "$(CYAN)üìÇ Sa√≠da: data/ocr_finetuning/$(RESET)"

# Fine-tuning do modelo
ocr-enhanced-finetune:
	@echo "$(MAGENTA)üéì Fine-tuning Enhanced PARSeq$(RESET)"
	@echo "$(CYAN)Configura√ß√£o: config/ocr/parseq_enhanced_full.yaml$(RESET)"
ifndef TRAIN_DATA
	@echo "$(YELLOW)‚ö†Ô∏è Usando dataset padr√£o: data/ocr_finetuning$(RESET)"
	$(PYTHON) $(SCRIPTS_DIR)/ocr/finetune_parseq.py \
		--config $(CONFIG_DIR)/ocr/parseq_enhanced_full.yaml \
		--train-data data/ocr_finetuning/train \
		--val-data data/ocr_finetuning/val \
		--output models/parseq_finetuned \
		--epochs 50 \
		--batch-size 32 \
		--learning-rate 1e-4
else
	@echo "$(CYAN)Train data: $(TRAIN_DATA)$(RESET)"
	$(PYTHON) $(SCRIPTS_DIR)/ocr/finetune_parseq.py \
		--config $(CONFIG_DIR)/ocr/parseq_enhanced_full.yaml \
		--train-data "$(TRAIN_DATA)" \
		--val-data "$(VAL_DATA)" \
		--output models/parseq_finetuned \
		--epochs 50 \
		--batch-size 32 \
		--learning-rate 1e-4
endif
	@echo "$(GREEN)‚úÖ Fine-tuning conclu√≠do!$(RESET)"
	@echo "$(CYAN)üìÇ Modelo: models/parseq_finetuned/$(RESET)"

# Fine-tuning r√°pido (teste)
ocr-enhanced-finetune-test:
	@echo "$(BLUE)üß™ Fine-tuning de Teste (10 √©pocas)$(RESET)"
	$(PYTHON) $(SCRIPTS_DIR)/ocr/finetune_parseq.py \
		--config $(CONFIG_DIR)/ocr/parseq_enhanced_full.yaml \
		--train-data data/ocr_finetuning/train \
		--val-data data/ocr_finetuning/val \
		--output models/parseq_finetuned_test \
		--epochs 10 \
		--batch-size 16 \
		--learning-rate 1e-4
	@echo "$(GREEN)‚úÖ Teste de fine-tuning conclu√≠do!$(RESET)"

# ========================================
# 6. EVALUATION & METRICS
# ========================================

# Avaliar modelo fine-tuned
ocr-enhanced-eval:
ifndef MODEL
	@echo "$(RED)‚ùå Especifique: make ocr-enhanced-eval MODEL=caminho/do/modelo$(RESET)"
	@echo "$(YELLOW)Exemplo: make ocr-enhanced-eval MODEL=models/parseq_finetuned/best.pt$(RESET)"
	@exit 1
endif
	@echo "$(BLUE)üìä Avaliando modelo fine-tuned...$(RESET)"
	@echo "$(CYAN)Modelo: $(MODEL)$(RESET)"
	$(PYTHON) -m src.ocr.evaluator \
		--engine parseq_enhanced \
		--config $(CONFIG_DIR)/ocr/parseq_enhanced.yaml \
		--model-path "$(MODEL)" \
		--test-data $(DATA_DIR)/ocr_test \
		--output outputs/ocr_benchmarks/parseq_finetuned \
		--detailed-metrics
	@echo "$(GREEN)‚úÖ Avalia√ß√£o conclu√≠da!$(RESET)"
	@echo "$(CYAN)üìä M√©tricas: outputs/ocr_benchmarks/parseq_finetuned/$(RESET)"

# Comparar modelo original vs fine-tuned
ocr-enhanced-compare-finetuned:
ifndef MODEL
	@echo "$(RED)‚ùå Especifique: make ocr-enhanced-compare-finetuned MODEL=caminho/do/modelo$(RESET)"
	@exit 1
endif
	@echo "$(MAGENTA)üìä Comparando Original vs Fine-tuned$(RESET)"
	@echo ""
	@echo "$(BLUE)1/2 Avaliando modelo original...$(RESET)"
	@make ocr-enhanced
	@echo ""
	@echo "$(BLUE)2/2 Avaliando modelo fine-tuned...$(RESET)"
	@make ocr-enhanced-eval MODEL="$(MODEL)"
	@echo ""
	@echo "$(CYAN)üìä Gerando compara√ß√£o...$(RESET)"
	$(PYTHON) $(SCRIPTS_DIR)/ocr/compare_models.py \
		--baseline outputs/ocr_benchmarks/parseq_enhanced \
		--finetuned outputs/ocr_benchmarks/parseq_finetuned \
		--output outputs/enhanced_parseq/finetuned_comparison
	@echo "$(GREEN)‚úÖ Compara√ß√£o conclu√≠da!$(RESET)"

# ========================================
# 7. SYNTHETIC DATA GENERATION
# ========================================

# Gerar dados sint√©ticos para fine-tuning
ocr-enhanced-generate-synthetic:
	@echo "$(BLUE)üé® Gerando dados sint√©ticos...$(RESET)"
ifndef NUM
	@echo "$(YELLOW)‚ö†Ô∏è Usando quantidade padr√£o: 10000 amostras$(RESET)"
	$(PYTHON) $(SCRIPTS_DIR)/ocr/generate_synthetic_data.py \
		--config $(CONFIG_DIR)/ocr/parseq_enhanced_full.yaml \
		--output data/ocr_synthetic \
		--num-samples 10000
else
	@echo "$(CYAN)Gerando $(NUM) amostras...$(RESET)"
	$(PYTHON) $(SCRIPTS_DIR)/ocr/generate_synthetic_data.py \
		--config $(CONFIG_DIR)/ocr/parseq_enhanced_full.yaml \
		--output data/ocr_synthetic \
		--num-samples $(NUM)
endif
	@echo "$(GREEN)‚úÖ Dados sint√©ticos gerados!$(RESET)"
	@echo "$(CYAN)üìÇ Sa√≠da: data/ocr_synthetic/$(RESET)"

# ========================================
# 8. AN√ÅLISE & VISUALIZA√á√ïES
# ========================================

# Visualizar componentes do pipeline
ocr-enhanced-visualize:
ifndef IMAGE
	@echo "$(RED)‚ùå Especifique: make ocr-enhanced-visualize IMAGE=caminho/da/imagem$(RESET)"
	@exit 1
endif
	@echo "$(BLUE)üé® Visualizando pipeline step-by-step...$(RESET)"
	$(PYTHON) $(SCRIPTS_DIR)/ocr/visualize_pipeline.py \
		--config $(CONFIG_DIR)/ocr/parseq_enhanced.yaml \
		--image "$(IMAGE)" \
		--output outputs/enhanced_parseq/visualizations \
		--show-all-steps
	@echo "$(GREEN)‚úÖ Visualiza√ß√µes geradas!$(RESET)"
	@echo "$(CYAN)üìÇ Sa√≠da: outputs/enhanced_parseq/visualizations/$(RESET)"

# An√°lise de erros detalhada
ocr-enhanced-error-analysis:
	@echo "$(BLUE)üîç An√°lise de erros detalhada...$(RESET)"
	$(PYTHON) $(SCRIPTS_DIR)/ocr/analyze_errors.py \
		--results outputs/ocr_benchmarks/parseq_enhanced \
		--test-data $(DATA_DIR)/ocr_test \
		--output outputs/enhanced_parseq/error_analysis \
		--categorize-errors \
		--visualize
	@echo "$(GREEN)‚úÖ An√°lise de erros conclu√≠da!$(RESET)"
	@echo "$(CYAN)üìä Relat√≥rio: outputs/enhanced_parseq/error_analysis/$(RESET)"

# ========================================
# 9. WORKFLOW COMPLETO
# ========================================

# Workflow completo: setup ‚Üí test ‚Üí experiment ‚Üí report
workflow-enhanced-parseq:
	@echo "$(MAGENTA)üéì WORKFLOW COMPLETO - Enhanced PARSeq$(RESET)"
	@echo "$(CYAN)‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê$(RESET)"
	@echo ""
	@echo "$(BLUE)1/6 üîß Setup: Baixando modelos...$(RESET)"
	@make ocr-parseq-setup
	@echo ""
	@echo "$(BLUE)2/6 üì¶ Preparando dataset OCR...$(RESET)"
	@make ocr-prepare-data
	@echo ""
	@echo "$(BLUE)3/6 üß™ Teste r√°pido (demo)...$(RESET)"
	@make ocr-enhanced-demo
	@echo ""
	@echo "$(BLUE)4/6 üìä Estudo de abla√ß√£o...$(RESET)"
	@make ocr-enhanced-ablation
	@echo ""
	@echo "$(BLUE)5/6 üî¨ Compara√ß√£o vs baseline...$(RESET)"
	@make ocr-enhanced-vs-baseline
	@echo ""
	@echo "$(BLUE)6/6 üìà Gerando relat√≥rio final...$(RESET)"
	$(PYTHON) $(SCRIPTS_DIR)/ocr/generate_report.py \
		--ablation outputs/enhanced_parseq/ablation \
		--comparison outputs/enhanced_parseq/comparison \
		--output outputs/enhanced_parseq/final_report.pdf
	@echo ""
	@echo "$(GREEN)üéâ WORKFLOW COMPLETO CONCLU√çDO!$(RESET)"
	@echo "$(YELLOW)‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ$(RESET)"
	@echo "$(CYAN)üìä Resultados:$(RESET)"
	@echo "   ‚Ä¢ Demo: outputs/enhanced_parseq/demo/"
	@echo "   ‚Ä¢ Ablation: outputs/enhanced_parseq/ablation/"
	@echo "   ‚Ä¢ Comparison: outputs/enhanced_parseq/comparison/"
	@echo "   ‚Ä¢ üìÑ Relat√≥rio Final: outputs/enhanced_parseq/final_report.pdf"

# Workflow de fine-tuning completo
workflow-enhanced-finetune:
	@echo "$(MAGENTA)üéì WORKFLOW FINE-TUNING - Enhanced PARSeq$(RESET)"
	@echo ""
ifndef TRAIN_DIR
	@echo "$(RED)‚ùå Especifique: make workflow-enhanced-finetune TRAIN_DIR=... VAL_DIR=...$(RESET)"
	@exit 1
endif
	@echo "$(BLUE)1/5 üì¶ Preparando dados...$(RESET)"
	@make ocr-enhanced-finetune-prepare TRAIN_DIR="$(TRAIN_DIR)" VAL_DIR="$(VAL_DIR)"
	@echo ""
	@echo "$(BLUE)2/5 üé® Gerando dados sint√©ticos (opcional)...$(RESET)"
	@make ocr-enhanced-generate-synthetic NUM=5000
	@echo ""
	@echo "$(BLUE)3/5 üéì Fine-tuning do modelo...$(RESET)"
	@make ocr-enhanced-finetune
	@echo ""
	@echo "$(BLUE)4/5 üìä Avaliando modelo fine-tuned...$(RESET)"
	@make ocr-enhanced-compare-finetuned MODEL=models/parseq_finetuned/best.pt
	@echo ""
	@echo "$(BLUE)5/5 üìà Gerando relat√≥rio...$(RESET)"
	$(PYTHON) $(SCRIPTS_DIR)/ocr/generate_finetune_report.py \
		--comparison outputs/enhanced_parseq/finetuned_comparison \
		--output outputs/enhanced_parseq/finetune_report.pdf
	@echo ""
	@echo "$(GREEN)üéâ WORKFLOW FINE-TUNING CONCLU√çDO!$(RESET)"
	@echo "$(CYAN)üìÑ Relat√≥rio: outputs/enhanced_parseq/finetune_report.pdf$(RESET)"

# ========================================
# 10. HELP & DOCUMENTATION
# ========================================

# Help espec√≠fico para Enhanced PARSeq
help-enhanced-parseq:
	@echo "$(CYAN)‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê$(RESET)"
	@echo "$(MAGENTA)  üöÄ Enhanced PARSeq - Guia de Comandos$(RESET)"
	@echo "$(CYAN)‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê$(RESET)"
	@echo ""
	@echo "$(GREEN)üìå TESTES R√ÅPIDOS:$(RESET)"
	@echo "  ocr-enhanced-demo              Demo interativo com imagem de teste"
	@echo "  ocr-enhanced                   Teste padr√£o (modo balanceado)"
	@echo "  ocr-enhanced-fast              Modo r√°pido (sem ensemble)"
	@echo "  ocr-enhanced-quality           Modo alta qualidade (lento)"
	@echo ""
	@echo "$(GREEN)üì¶ BATCH PROCESSING:$(RESET)"
	@echo "  ocr-enhanced-batch DIR=...     Processar diret√≥rio completo"
	@echo ""
	@echo "$(GREEN)üî¨ EXPERIMENTOS:$(RESET)"
	@echo "  ocr-enhanced-ablation          Estudo de abla√ß√£o completo"
	@echo "  ocr-enhanced-vs-baseline       Comparar vs baseline"
	@echo "  ocr-enhanced-experiment        Experimento com todos presets"
	@echo ""
	@echo "$(GREEN)üéì FINE-TUNING:$(RESET)"
	@echo "  ocr-enhanced-finetune-prepare  Preparar dados para fine-tuning"
	@echo "  ocr-enhanced-finetune          Fine-tuning do modelo"
	@echo "  ocr-enhanced-eval MODEL=...    Avaliar modelo fine-tuned"
	@echo "  ocr-enhanced-generate-synthetic Gerar dados sint√©ticos"
	@echo ""
	@echo "$(GREEN)üìä AN√ÅLISE:$(RESET)"
	@echo "  ocr-enhanced-visualize IMAGE=  Visualizar pipeline step-by-step"
	@echo "  ocr-enhanced-error-analysis    An√°lise detalhada de erros"
	@echo ""
	@echo "$(GREEN)üéØ WORKFLOWS:$(RESET)"
	@echo "  workflow-enhanced-parseq       Workflow completo (demo‚Üíablation‚Üícompara√ß√£o)"
	@echo "  workflow-enhanced-finetune     Workflow fine-tuning completo"
	@echo ""
	@echo "$(YELLOW)üí° EXEMPLOS:$(RESET)"
	@echo "  make ocr-enhanced-demo IMAGE=test.jpg"
	@echo "  make ocr-enhanced-batch DIR=data/ocr_test"
	@echo "  make ocr-enhanced-finetune TRAIN_DATA=data/train VAL_DATA=data/val"
	@echo ""
	@echo "$(CYAN)üìö Documenta√ß√£o:$(RESET)"
	@echo "  ‚Ä¢ docs/PARSEQ_ENHANCED_GUIDE.md"
	@echo "  ‚Ä¢ docs/IMPLEMENTATION_CHECKLIST.md"
	@echo "  ‚Ä¢ docs/CODE_EXAMPLES.md"
	@echo "  ‚Ä¢ docs/FAQ_ENHANCED_PARSEQ.md"
	@echo "$(CYAN)‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê$(RESET)"