# ========================================
# YOLOv8m Training Configuration - TCC
# Detec√ß√£o de Datas de Validade
# ========================================
# Hardware: GTX 1660 Super (6GB VRAM)
# Dataset: ~1000 imagens
# Tempo estimado: 8-9 horas
# ========================================
# ‚ö†Ô∏è ATEN√á√ÉO: Modelo pesado! Use para resultados finais
# Recomendado: Treinar overnight ou em v√°rias sess√µes
# ========================================

# Data configuration
data: config/yolo/bbox/data.yaml

# Model configuration
model: yolov8m.pt  # Medium - alto desempenho (25.9M par√¢metros)
task: detect

# Training hyperparameters
epochs: 150    # Mais √©pocas para modelo maior convergir
imgsz: 640     # Resolu√ß√£o padr√£o YOLO
batch: 4       # Batch reduzido (CR√çTICO para n√£o estourar VRAM)
device: 0      # GPU 0 (primeira GPU dispon√≠vel)

# Learning rate schedule
lr0: 0.01      # Learning rate inicial
lrf: 0.01      # Learning rate final (fra√ß√£o do inicial)
momentum: 0.937
weight_decay: 0.0005

# Optimizer
optimizer: SGD  # SGD geralmente melhor que Adam para YOLO

# Training settings
patience: 50        # Early stopping ap√≥s 50 √©pocas sem melhoria
workers: 4          # Reduzido de 8 para 4 (mais est√°vel no Windows)
cache: false        # false = economia de RAM (importante para modelo pesado)
save: true          # Salvar checkpoints
save_period: 10     # Salvar a cada 10 √©pocas (backup para treino longo!)
exist_ok: true      # Sobrescrever experimentos anteriores

# Loss gains (pesos das losses)
box: 7.5   # Peso da loss de bounding box (detec√ß√£o da regi√£o)
cls: 0.5   # Peso da loss de classifica√ß√£o (tipo de objeto)
dfl: 1.5   # Peso da loss de distribution focal (refinamento)

# Data augmentation (ATIVADO - essencial para generaliza√ß√£o!)
augmentation: true

# Augmentations geom√©tricas
hsv_h: 0.015        # Varia√ß√£o de matiz (hue) - pequena varia√ß√£o de cor
hsv_s: 0.7          # Varia√ß√£o de satura√ß√£o - diferentes condi√ß√µes de luz
hsv_v: 0.4          # Varia√ß√£o de brilho (value) - ilumina√ß√£o variada
degrees: 10.0       # Rota√ß√£o (¬±10 graus) - produtos em √¢ngulos diferentes
translate: 0.1      # Transla√ß√£o (10% da imagem) - posi√ß√£o variada
scale: 0.5          # Zoom in/out (50%) - diferentes dist√¢ncias da c√¢mera
shear: 0.0          # Cisalhamento (desabilitado - n√£o √∫til para textos)
perspective: 0.0    # Distor√ß√£o de perspectiva (desabilitado)
flipud: 0.0         # Flip vertical (0 = desabilitado - texto invertido)
fliplr: 0.5         # Flip horizontal (50% de chance - embalagens de ambos lados)

# Augmentations avan√ßadas
mosaic: 1.0         # Mosaic augmentation (combina 4 imagens - 100%)
mixup: 0.1          # MixUp (mistura 2 imagens) - 10% de chance
copy_paste: 0.0     # Copy-paste augmentation (desabilitado)

# Validation settings
val: true           # Executar valida√ß√£o durante treinamento
plots: true         # Gerar plots de m√©tricas (loss, precision, recall, etc)
rect: false         # Rectangular training (false = mais augmentation)

# Project settings
project: experiments                 # Pasta onde salvar resultados
name: yolov8m_validade_production   # Nome do experimento (produ√ß√£o)

# Inference settings (para depois do treino)
conf: 0.25          # Confidence threshold para predi√ß√µes
iou: 0.7            # IoU threshold para NMS (Non-Maximum Suppression)

# ========================================
# Notas para o TCC:
# ========================================
# 1. YOLOv8m = PRODU√á√ÉO (melhor precis√£o)
# 2. Tempo estimado: 8-9 horas (OVERNIGHT!)
# 3. Batch 4 (m√°ximo para 6GB VRAM)
# 4. Checkpoints a cada 10 √©pocas (seguran√ßa)
# 5. Early stopping em 50 √©pocas
# 6. Use este para resultados FINAIS do TCC
#
# ‚ö†Ô∏è IMPORTANTE:
# - Monitore temperatura da GPU!
# - Deixe rodar overnight
# - Se crashar, retoma do √∫ltimo checkpoint
# - Batch 4 pode ser lento mas √© SEGURO
#
# Vantagens:
# ‚úì Melhor precis√£o (mAP)
# ‚úì Detecta casos dif√≠ceis
# ‚úì Menos falsos negativos
# ‚úì Ideal para demonstra√ß√£o final
#
# Desvantagens:
# ‚úó Treinamento muito lento
# ‚úó Infer√™ncia mais lenta
# ‚úó Risco de overfitting
# ‚úó Alto uso de VRAM
#
# Para treinar:
# yolo train data=data.yaml model=yolov8m.pt cfg=yolov8m_config.yaml
#
# Para validar:
# yolo val data=data.yaml model=experiments/yolov8m_validade_production/weights/best.pt
#
# Para retomar treinamento (se crashar):
# yolo train resume model=experiments/yolov8m_validade_production/weights/last.pt
#
# üí° DICA: Treine yolov8n primeiro para validar
# pipeline, depois yolov8s para compara√ß√£o, e
# finalmente yolov8m para resultados finais!
# ========================================