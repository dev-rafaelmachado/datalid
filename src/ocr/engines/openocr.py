"""
üîì OpenOCR Engine
Wrapper para OpenOCR (Open-source high-accuracy OCR).

OpenOCR √© um engine OCR de c√≥digo aberto com alta precis√£o,
suportando m√∫ltiplos backends (ONNX e PyTorch) e dispositivos (CPU/GPU).
"""

import json
import re
import tempfile
from pathlib import Path
from typing import Any, Dict, Tuple

import cv2
import numpy as np
from loguru import logger

from src.ocr.engines.base import OCREngineBase


class OpenOCREngine(OCREngineBase):
    """
    Engine para OpenOCR.
    
    OpenOCR fornece reconhecimento de texto de alta qualidade com suporte
    para m√∫ltiplos backends e otimizado para textos de documentos.
    """
    
    def __init__(self, config: Dict[str, Any]):
        """
        Inicializa OpenOCR Engine.
        
        Args:
            config: Dicion√°rio de configura√ß√£o contendo:
                - backend: 'onnx' (padr√£o, mais r√°pido) ou 'torch'
                - device: 'cpu' (padr√£o) ou 'cuda'
                - confidence_threshold: limite m√≠nimo de confian√ßa (0.5 padr√£o)
                - preprocessing: configura√ß√µes de pr√©-processamento
                - postprocessing: configura√ß√µes de p√≥s-processamento
        """
        super().__init__(config)
        
        # Configura√ß√µes principais
        self.backend = config.get('backend', 'onnx')  # 'onnx' or 'torch'
        self.device = config.get('device', 'cpu')  # 'cpu' or 'cuda'
        self.confidence_threshold = config.get('confidence_threshold', 0.5)
        
        # Configura√ß√µes de pr√©-processamento interno (para resize b√°sico)
        # NOTA: O pr√©-processamento completo √© feito externamente via ImagePreprocessor
        preproc = config.get('internal_preprocessing', config.get('preprocessing', {}))
        self.preproc_enabled = preproc.get('enabled', True)
        self.resize_enabled = preproc.get('resize', True)
        self.max_width = preproc.get('max_width', 1280)
        self.max_height = preproc.get('max_height', 1280)
        
        # Configura√ß√µes de p√≥s-processamento
        postproc = config.get('postprocessing', {})
        self.postproc_enabled = postproc.get('enabled', True)
        self.remove_extra_spaces = postproc.get('remove_extra_spaces', True)
        self.strip_whitespace = postproc.get('strip_whitespace', True)
    
    
    def initialize(self) -> None:
        """
        Inicializa o OpenOCR.
        
        Carrega o modelo OpenOCR com o backend e device especificados.
        Suporta ONNX (mais r√°pido, menor uso de mem√≥ria) e PyTorch (mais preciso).
        
        IMPORTANTE sobre GPU:
        - backend='onnx' + device='cuda': Requer onnxruntime-gpu instalado
        - backend='torch' + device='cuda': Requer PyTorch com CUDA instalado
        - OpenOCR usa GPU apenas para infer√™ncia (pr√©-processamento √© sempre CPU)
        """
        if self._is_initialized:
            logger.debug("‚úÖ OpenOCR j√° inicializado")
            return
        
        try:
            from openocr import OpenOCR
            
            logger.info(
                f"üîÑ Inicializando OpenOCR "
                f"(backend={self.backend}, device={self.device})..."
            )
            
            # Verificar se CUDA est√° dispon√≠vel
            if self.device == 'cuda':
                if self.backend == 'onnx':
                    try:
                        import onnxruntime as ort
                        providers = ort.get_available_providers()
                        if 'CUDAExecutionProvider' in providers:
                            logger.info("‚úÖ ONNX Runtime com CUDA dispon√≠vel")
                        else:
                            logger.warning("‚ö†Ô∏è CUDA solicitado mas onnxruntime-gpu n√£o detectado")
                            logger.warning("   Instale: pip uninstall onnxruntime && pip install onnxruntime-gpu")
                            logger.warning("   Continuando com CPU...")
                            self.device = 'cpu'
                    except ImportError:
                        logger.warning("‚ö†Ô∏è onnxruntime n√£o instalado, usando CPU")
                        self.device = 'cpu'
                
                elif self.backend == 'torch':
                    try:
                        import torch
                        if torch.cuda.is_available():
                            logger.info(f"‚úÖ PyTorch com CUDA dispon√≠vel (GPU: {torch.cuda.get_device_name(0)})")
                        else:
                            logger.warning("‚ö†Ô∏è CUDA solicitado mas PyTorch sem suporte CUDA")
                            logger.warning("   Reinstale PyTorch com CUDA: https://pytorch.org")
                            logger.warning("   Continuando com CPU...")
                            self.device = 'cpu'
                    except ImportError:
                        logger.warning("‚ö†Ô∏è PyTorch n√£o instalado, usando CPU")
                        self.device = 'cpu'
            
            # Criar inst√¢ncia do OpenOCR
            self.engine = OpenOCR(
                backend=self.backend,
                device=self.device
            )
            
            # Verificar se h√° atributo version
            try:
                import openocr
                version = getattr(openocr, '__version__', 'unknown')
                logger.info(f"‚úÖ OpenOCR v{version} inicializado com sucesso")
            except:
                logger.info("‚úÖ OpenOCR inicializado com sucesso")
            
            # Log final do device usado
            logger.info(f"   üñ•Ô∏è Usando: backend={self.backend}, device={self.device}")
            if self.device == 'cpu':
                logger.info("   üí° Pr√©-processamento usa CPU (OpenCV), OCR usa o device configurado")
            
            self._is_initialized = True
            
        except ImportError as e:
            logger.error(
                "‚ùå openocr n√£o instalado. "
                "Execute: pip install openocr"
            )
            raise ImportError(
                "OpenOCR n√£o dispon√≠vel. Instale com: pip install openocr"
            ) from e
        except Exception as e:
            logger.error(f"‚ùå Erro ao inicializar OpenOCR: {e}")
            raise RuntimeError(f"Falha ao inicializar OpenOCR: {e}") from e
    
    
    def _preprocess_image(self, image: np.ndarray) -> np.ndarray:
        """
        Aplica pr√©-processamento na imagem.
        
        Args:
            image: Imagem original BGR
            
        Returns:
            Imagem pr√©-processada
        """
        if not self.preproc_enabled:
            return image
        
        processed = image.copy()
        
        # Redimensionar se necess√°rio
        if self.resize_enabled:
            h, w = processed.shape[:2]
            
            if w > self.max_width or h > self.max_height:
                # Calcular novo tamanho mantendo aspect ratio
                scale = min(self.max_width / w, self.max_height / h)
                new_w = int(w * scale)
                new_h = int(h * scale)
                
                processed = cv2.resize(
                    processed,
                    (new_w, new_h),
                    interpolation=cv2.INTER_AREA
                )
                logger.debug(f"üîß Imagem redimensionada: {w}x{h} ‚Üí {new_w}x{new_h}")
        
        return processed
    
    def _postprocess_text(self, text: str) -> str:
        """
        Aplica p√≥s-processamento no texto extra√≠do.
        
        Args:
            text: Texto bruto
            
        Returns:
            Texto processado
        """
        if not self.postproc_enabled or not text:
            return text
        
        processed = text
        
        # Remover espa√ßos extras
        if self.remove_extra_spaces:
            processed = re.sub(r'\s+', ' ', processed)
        
        # Remover espa√ßos nas bordas
        if self.strip_whitespace:
            processed = processed.strip()
        
        return processed

    def _parse_openocr_result(self, result: list) -> Tuple[list, list]:
        """
        Parse dos resultados do OpenOCR.
        
        OpenOCR retorna lista de dicion√°rios:
        [{'transcription': 'texto', 'points': [...], 'score': 0.99}, ...]
        
        Args:
            result: Lista de dicion√°rios retornada pelo OpenOCR
            
        Returns:
            Tupla (textos, confian√ßas)
        """
        texts = []
        confidences = []

        # OpenOCR retorna diretamente lista de dicts
        if not isinstance(result, list):
            logger.warning(f"‚ö†Ô∏è Resultado n√£o √© lista: {type(result)}")
            return texts, confidences

        for det in result:
            # Cada detec√ß√£o j√° √© um dicion√°rio
            if not isinstance(det, dict):
                logger.warning(f"‚ö†Ô∏è Detec√ß√£o n√£o √© dict: {type(det)}")
                continue

            # Extrair texto e confian√ßa
            text = det.get('transcription', '').strip()
            score = det.get('score', 0.0)

            # Filtrar por threshold
            if score >= self.confidence_threshold and text:
                texts.append(text)
                confidences.append(score)
                logger.debug(f"   ‚úì '{text}' (conf: {score:.3f})")

        return texts, confidences
    
    def extract_text(self, image: np.ndarray) -> Tuple[str, float]:
        """
        Extrai texto da imagem usando OpenOCR.
        
        Args:
            image: Imagem numpy array BGR
            
        Returns:
            Tupla (texto extra√≠do, confian√ßa m√©dia)
        """
        if not self._is_initialized:
            raise RuntimeError("OpenOCR n√£o inicializado. Chame initialize() primeiro.")
        
        # Pr√©-processar imagem
        processed_image = self._preprocess_image(image)
        
        # Salvar imagem temporariamente (OpenOCR aceita path)
        with tempfile.NamedTemporaryFile(suffix='.jpg', delete=False) as tmp_img_file:
            tmp_path = tmp_img_file.name
            cv2.imwrite(tmp_path, processed_image)
        
        try:
            # Executar OCR (OpenOCR retorna (result, time_info))
            result, time_info = self.engine(tmp_path)
            
            # Extrair tempo de processamento de forma mais robusta
            elapsed_time = 0.0
            try:
                if isinstance(time_info, list) and len(time_info) > 0:
                    # time_info √© uma lista com um dict: [{'time_cost': 0.5, ...}]
                    time_dict = time_info[0]
                    if isinstance(time_dict, dict):
                        elapsed_time = float(time_dict.get('time_cost', 0.0))
                elif isinstance(time_info, dict):
                    elapsed_time = float(time_info.get('time_cost', 0.0))
                else:
                    elapsed_time = float(time_info) if time_info else 0.0
            except (TypeError, ValueError) as e:
                logger.warning(f"‚ö†Ô∏è N√£o foi poss√≠vel extrair tempo: {e}")
                elapsed_time = 0.0
            
            logger.debug(f"‚è±Ô∏è OpenOCR processou em {elapsed_time:.3f}s")
            
            # OpenOCR retorna uma lista com um √∫nico elemento string: ['filename\t[{...}]\n']
            # Precisamos extrair e parsear o JSON
            if isinstance(result, list) and len(result) > 0 and isinstance(result[0], str):
                try:
                    import json

                    # Pegar o primeiro elemento (a string)
                    result_str = result[0]
                    
                    # Remover filename e tab (formato: 'filename.jpg\t[{...}]\n')
                    if '\t' in result_str:
                        result_str = result_str.split('\t', 1)[1]
                    
                    # Remover quebra de linha no final
                    result_str = result_str.strip()
                    
                    # Parsear JSON
                    result = json.loads(result_str)
                    logger.debug(f"‚úÖ JSON parseado: {len(result)} detec√ß√µes")
                    
                except Exception as e:
                    logger.error(f"‚ùå Erro ao parsear resultado OpenOCR: {e}")
                    logger.debug(f"   String original: {result[0][:200] if result else 'vazio'}")
                    result = []
            
            # Parse dos resultados
            texts, confidences = self._parse_openocr_result(result)
            
            # Combinar textos
            final_text = ' '.join(texts)
            
            # Calcular confian√ßa m√©dia
            if confidences:
                avg_confidence = sum(confidences) / len(confidences)
            else:
                avg_confidence = 0.0
            
            # P√≥s-processar texto
            final_text = self._postprocess_text(final_text)
            
            return final_text, avg_confidence
            
        finally:
            # Limpar arquivo tempor√°rio
            try:
                Path(tmp_path).unlink(missing_ok=True)
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Erro ao limpar arquivo tempor√°rio: {e}")
  
    def get_name(self) -> str:
        """
        Retorna o nome do engine.
        
        Returns:
            Nome identificador do engine
        """
        return "openocr"
    
    def get_version(self) -> str:
        """
        Retorna a vers√£o do OpenOCR instalado.
        
        Returns:
            String com a vers√£o ou 'unknown'
        """
        try:
            import openocr
            version = getattr(openocr, '__version__', 'unknown')
            return version
        except (ImportError, AttributeError):
            return "unknown"
    
    def get_info(self) -> Dict[str, Any]:
        """
        Retorna informa√ß√µes completas sobre o engine.
        
        Returns:
            Dicion√°rio com informa√ß√µes do engine
        """
        return {
            'name': self.get_name(),
            'version': self.get_version(),
            'backend': self.backend,
            'device': self.device,
            'confidence_threshold': self.confidence_threshold,
            'preprocessing_enabled': self.preproc_enabled,
            'postprocessing_enabled': self.postproc_enabled,
            'initialized': self._is_initialized
        }


__all__ = ['OpenOCREngine']